// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	sendnotif "github.com/capstone-kelompok-7/backend-disappear/utils/sendnotif"
	mock "github.com/stretchr/testify/mock"
)

// FcmServiceInterface is an autogenerated mock type for the FcmServiceInterface type
type FcmServiceInterface struct {
	mock.Mock
}

// SendNotification provides a mock function with given fields: request
func (_m *FcmServiceInterface) SendNotification(request sendnotif.SendNotificationRequest) (string, error) {
	ret := _m.Called(request)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(sendnotif.SendNotificationRequest) (string, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(sendnotif.SendNotificationRequest) string); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(sendnotif.SendNotificationRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFcmServiceInterface creates a new instance of FcmServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFcmServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *FcmServiceInterface {
	mock := &FcmServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
