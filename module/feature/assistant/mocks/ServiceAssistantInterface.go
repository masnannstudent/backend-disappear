// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/capstone-kelompok-7/backend-disappear/module/entities"
	mock "github.com/stretchr/testify/mock"

	openai "github.com/sashabaranov/go-openai"
)

// ServiceAssistantInterface is an autogenerated mock type for the ServiceAssistantInterface type
type ServiceAssistantInterface struct {
	mock.Mock
}

// CreateAnswer provides a mock function with given fields: userID, newData
func (_m *ServiceAssistantInterface) CreateAnswer(userID uint64, newData entities.ChatModel) (string, error) {
	ret := _m.Called(userID, newData)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, entities.ChatModel) (string, error)); ok {
		return rf(userID, newData)
	}
	if rf, ok := ret.Get(0).(func(uint64, entities.ChatModel) string); ok {
		r0 = rf(userID, newData)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint64, entities.ChatModel) error); ok {
		r1 = rf(userID, newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateQuestion provides a mock function with given fields: userID, newData
func (_m *ServiceAssistantInterface) CreateQuestion(userID uint64, newData entities.ChatModel) error {
	ret := _m.Called(userID, newData)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, entities.ChatModel) error); ok {
		r0 = rf(userID, newData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateArticle provides a mock function with given fields: title
func (_m *ServiceAssistantInterface) GenerateArticle(title string) (string, error) {
	ret := _m.Called(title)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(title)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(title)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateRecommendationProduct provides a mock function with given fields: userID
func (_m *ServiceAssistantInterface) GenerateRecommendationProduct(userID uint64) ([]string, error) {
	ret := _m.Called(userID)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) ([]string, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint64) []string); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAnswerFromAi provides a mock function with given fields: chat, ctx
func (_m *ServiceAssistantInterface) GetAnswerFromAi(chat []openai.ChatCompletionMessage, ctx context.Context) (openai.ChatCompletionResponse, error) {
	ret := _m.Called(chat, ctx)

	var r0 openai.ChatCompletionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func([]openai.ChatCompletionMessage, context.Context) (openai.ChatCompletionResponse, error)); ok {
		return rf(chat, ctx)
	}
	if rf, ok := ret.Get(0).(func([]openai.ChatCompletionMessage, context.Context) openai.ChatCompletionResponse); ok {
		r0 = rf(chat, ctx)
	} else {
		r0 = ret.Get(0).(openai.ChatCompletionResponse)
	}

	if rf, ok := ret.Get(1).(func([]openai.ChatCompletionMessage, context.Context) error); ok {
		r1 = rf(chat, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChatByIdUser provides a mock function with given fields: id
func (_m *ServiceAssistantInterface) GetChatByIdUser(id uint64) ([]entities.ChatModel, error) {
	ret := _m.Called(id)

	var r0 []entities.ChatModel
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) ([]entities.ChatModel, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint64) []entities.ChatModel); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.ChatModel)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServiceAssistantInterface creates a new instance of ServiceAssistantInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceAssistantInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceAssistantInterface {
	mock := &ServiceAssistantInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
