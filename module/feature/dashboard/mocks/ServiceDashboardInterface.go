// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	entities "github.com/capstone-kelompok-7/backend-disappear/module/entities"
	dto "github.com/capstone-kelompok-7/backend-disappear/module/feature/dashboard/dto"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ServiceDashboardInterface is an autogenerated mock type for the ServiceDashboardInterface type
type ServiceDashboardInterface struct {
	mock.Mock
}

// GetCardDashboard provides a mock function with given fields:
func (_m *ServiceDashboardInterface) GetCardDashboard() (int64, int64, int64, float64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 int64
	var r2 int64
	var r3 float64
	var r4 error
	if rf, ok := ret.Get(0).(func() (int64, int64, int64, float64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() int64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func() int64); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(int64)
	}

	if rf, ok := ret.Get(3).(func() float64); ok {
		r3 = rf()
	} else {
		r3 = ret.Get(3).(float64)
	}

	if rf, ok := ret.Get(4).(func() error); ok {
		r4 = rf()
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// GetGramPlasticStat provides a mock function with given fields: startOfWeek, endOfWeek
func (_m *ServiceDashboardInterface) GetGramPlasticStat(startOfWeek time.Time, endOfWeek time.Time) (uint64, error) {
	ret := _m.Called(startOfWeek, endOfWeek)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) (uint64, error)); ok {
		return rf(startOfWeek, endOfWeek)
	}
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) uint64); ok {
		r0 = rf(startOfWeek, endOfWeek)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(time.Time, time.Time) error); ok {
		r1 = rf(startOfWeek, endOfWeek)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLandingPage provides a mock function with given fields:
func (_m *ServiceDashboardInterface) GetLandingPage() (int64, int64, int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 int64
	var r2 int64
	var r3 error
	if rf, ok := ret.Get(0).(func() (int64, int64, int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() int64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func() int64); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(int64)
	}

	if rf, ok := ret.Get(3).(func() error); ok {
		r3 = rf()
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetLatestTransactions provides a mock function with given fields: limit
func (_m *ServiceDashboardInterface) GetLatestTransactions(limit int) ([]*dto.LastTransactionResponse, error) {
	ret := _m.Called(limit)

	var r0 []*dto.LastTransactionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]*dto.LastTransactionResponse, error)); ok {
		return rf(limit)
	}
	if rf, ok := ret.Get(0).(func(int) []*dto.LastTransactionResponse); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.LastTransactionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductReviewsWithMaxTotal provides a mock function with given fields:
func (_m *ServiceDashboardInterface) GetProductReviewsWithMaxTotal() ([]*entities.ProductModels, error) {
	ret := _m.Called()

	var r0 []*entities.ProductModels
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.ProductModels, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.ProductModels); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServiceDashboardInterface creates a new instance of ServiceDashboardInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceDashboardInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceDashboardInterface {
	mock := &ServiceDashboardInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
