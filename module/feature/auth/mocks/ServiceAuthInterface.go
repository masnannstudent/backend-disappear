// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	entities "github.com/capstone-kelompok-7/backend-disappear/module/entities"
	dto "github.com/capstone-kelompok-7/backend-disappear/module/feature/auth/dto"

	mock "github.com/stretchr/testify/mock"
)

// ServiceAuthInterface is an autogenerated mock type for the ServiceAuthInterface type
type ServiceAuthInterface struct {
	mock.Mock
}

// Login provides a mock function with given fields: email, password, deviceToken
func (_m *ServiceAuthInterface) Login(email string, password string, deviceToken string) (*entities.UserModels, string, error) {
	ret := _m.Called(email, password, deviceToken)

	var r0 *entities.UserModels
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*entities.UserModels, string, error)); ok {
		return rf(email, password, deviceToken)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *entities.UserModels); ok {
		r0 = rf(email, password, deviceToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.UserModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) string); ok {
		r1 = rf(email, password, deviceToken)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string, string) error); ok {
		r2 = rf(email, password, deviceToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LoginSocial provides a mock function with given fields: socialID
func (_m *ServiceAuthInterface) LoginSocial(socialID string) (*entities.UserModels, string, error) {
	ret := _m.Called(socialID)

	var r0 *entities.UserModels
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*entities.UserModels, string, error)); ok {
		return rf(socialID)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.UserModels); ok {
		r0 = rf(socialID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.UserModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(socialID)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(socialID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Register provides a mock function with given fields: newData
func (_m *ServiceAuthInterface) Register(newData *entities.UserModels) (*entities.UserModels, error) {
	ret := _m.Called(newData)

	var r0 *entities.UserModels
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.UserModels) (*entities.UserModels, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(*entities.UserModels) *entities.UserModels); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.UserModels)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.UserModels) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterSocial provides a mock function with given fields: req
func (_m *ServiceAuthInterface) RegisterSocial(req *dto.RegisterSocialRequest) (*entities.UserModels, error) {
	ret := _m.Called(req)

	var r0 *entities.UserModels
	var r1 error
	if rf, ok := ret.Get(0).(func(*dto.RegisterSocialRequest) (*entities.UserModels, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*dto.RegisterSocialRequest) *entities.UserModels); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.UserModels)
		}
	}

	if rf, ok := ret.Get(1).(func(*dto.RegisterSocialRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResendOTP provides a mock function with given fields: email
func (_m *ServiceAuthInterface) ResendOTP(email string) (*entities.OTPModels, error) {
	ret := _m.Called(email)

	var r0 *entities.OTPModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.OTPModels, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.OTPModels); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.OTPModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPassword provides a mock function with given fields: email, newPassword, confirmPass
func (_m *ServiceAuthInterface) ResetPassword(email string, newPassword string, confirmPass string) error {
	ret := _m.Called(email, newPassword, confirmPass)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(email, newPassword, confirmPass)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyEmail provides a mock function with given fields: email, otp
func (_m *ServiceAuthInterface) VerifyEmail(email string, otp string) error {
	ret := _m.Called(email, otp)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(email, otp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyOTP provides a mock function with given fields: email, otp
func (_m *ServiceAuthInterface) VerifyOTP(email string, otp string) (string, error) {
	ret := _m.Called(email, otp)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(email, otp)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(email, otp)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, otp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServiceAuthInterface creates a new instance of ServiceAuthInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceAuthInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceAuthInterface {
	mock := &ServiceAuthInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
