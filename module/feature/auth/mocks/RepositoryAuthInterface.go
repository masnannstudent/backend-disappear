// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	entities "github.com/capstone-kelompok-7/backend-disappear/module/entities"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// RepositoryAuthInterface is an autogenerated mock type for the RepositoryAuthInterface type
type RepositoryAuthInterface struct {
	mock.Mock
}

// CekDeviceTokenByEmail provides a mock function with given fields: email
func (_m *RepositoryAuthInterface) CekDeviceTokenByEmail(email string) (string, error) {
	ret := _m.Called(email)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOTP provides a mock function with given fields: otp
func (_m *RepositoryAuthInterface) DeleteOTP(otp *entities.OTPModels) error {
	ret := _m.Called(otp)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.OTPModels) error); ok {
		r0 = rf(otp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserOTP provides a mock function with given fields: userId
func (_m *RepositoryAuthInterface) DeleteUserOTP(userId uint64) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindUserBySocialID provides a mock function with given fields: socialID
func (_m *RepositoryAuthInterface) FindUserBySocialID(socialID string) (*entities.UserModels, error) {
	ret := _m.Called(socialID)

	var r0 *entities.UserModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.UserModels, error)); ok {
		return rf(socialID)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.UserModels); ok {
		r0 = rf(socialID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.UserModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(socialID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindValidOTP provides a mock function with given fields: userID, otp
func (_m *RepositoryAuthInterface) FindValidOTP(userID int, otp string) (*entities.OTPModels, error) {
	ret := _m.Called(userID, otp)

	var r0 *entities.OTPModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) (*entities.OTPModels, error)); ok {
		return rf(userID, otp)
	}
	if rf, ok := ret.Get(0).(func(int, string) *entities.OTPModels); ok {
		r0 = rf(userID, otp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.OTPModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(userID, otp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email
func (_m *RepositoryAuthInterface) Login(email string) (*entities.UserModels, error) {
	ret := _m.Called(email)

	var r0 *entities.UserModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.UserModels, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.UserModels); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.UserModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginSocial provides a mock function with given fields: socialID
func (_m *RepositoryAuthInterface) LoginSocial(socialID string) (*entities.UserModels, error) {
	ret := _m.Called(socialID)

	var r0 *entities.UserModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.UserModels, error)); ok {
		return rf(socialID)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.UserModels); ok {
		r0 = rf(socialID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.UserModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(socialID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: newData
func (_m *RepositoryAuthInterface) Register(newData *entities.UserModels) (*entities.UserModels, error) {
	ret := _m.Called(newData)

	var r0 *entities.UserModels
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.UserModels) (*entities.UserModels, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(*entities.UserModels) *entities.UserModels); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.UserModels)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.UserModels) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPassword provides a mock function with given fields: email, newPasswordHash
func (_m *RepositoryAuthInterface) ResetPassword(email string, newPasswordHash string) error {
	ret := _m.Called(email, newPasswordHash)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(email, newPasswordHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveOTP provides a mock function with given fields: otp
func (_m *RepositoryAuthInterface) SaveOTP(otp *entities.OTPModels) (*entities.OTPModels, error) {
	ret := _m.Called(otp)

	var r0 *entities.OTPModels
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.OTPModels) (*entities.OTPModels, error)); ok {
		return rf(otp)
	}
	if rf, ok := ret.Get(0).(func(*entities.OTPModels) *entities.OTPModels); ok {
		r0 = rf(otp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.OTPModels)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.OTPModels) error); ok {
		r1 = rf(otp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeviceTokenByID provides a mock function with given fields: email, deviceToken
func (_m *RepositoryAuthInterface) UpdateDeviceTokenByID(email string, deviceToken string) (*entities.UserModels, error) {
	ret := _m.Called(email, deviceToken)

	var r0 *entities.UserModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*entities.UserModels, error)); ok {
		return rf(email, deviceToken)
	}
	if rf, ok := ret.Get(0).(func(string, string) *entities.UserModels); ok {
		r0 = rf(email, deviceToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.UserModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, deviceToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLastLogin provides a mock function with given fields: userID, lastLogin
func (_m *RepositoryAuthInterface) UpdateLastLogin(userID uint64, lastLogin time.Time) error {
	ret := _m.Called(userID, lastLogin)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, time.Time) error); ok {
		r0 = rf(userID, lastLogin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: user
func (_m *RepositoryAuthInterface) UpdateUser(user *entities.UserModels) (*entities.UserModels, error) {
	ret := _m.Called(user)

	var r0 *entities.UserModels
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.UserModels) (*entities.UserModels, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*entities.UserModels) *entities.UserModels); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.UserModels)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.UserModels) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepositoryAuthInterface creates a new instance of RepositoryAuthInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryAuthInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryAuthInterface {
	mock := &RepositoryAuthInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
