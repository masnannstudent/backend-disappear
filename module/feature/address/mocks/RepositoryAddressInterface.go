// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	entities "github.com/capstone-kelompok-7/backend-disappear/module/entities"
	dto "github.com/capstone-kelompok-7/backend-disappear/module/feature/address/dto"

	mock "github.com/stretchr/testify/mock"
)

// RepositoryAddressInterface is an autogenerated mock type for the RepositoryAddressInterface type
type RepositoryAddressInterface struct {
	mock.Mock
}

// CreateAddress provides a mock function with given fields: newData
func (_m *RepositoryAddressInterface) CreateAddress(newData *entities.AddressModels) (*entities.AddressModels, error) {
	ret := _m.Called(newData)

	var r0 *entities.AddressModels
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.AddressModels) (*entities.AddressModels, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(*entities.AddressModels) *entities.AddressModels); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.AddressModels)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.AddressModels) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAddress provides a mock function with given fields: addressID
func (_m *RepositoryAddressInterface) DeleteAddress(addressID uint64) error {
	ret := _m.Called(addressID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(addressID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllByUserID provides a mock function with given fields: userID, page, perPage
func (_m *RepositoryAddressInterface) FindAllByUserID(userID uint64, page int, perPage int) ([]*entities.AddressModels, error) {
	ret := _m.Called(userID, page, perPage)

	var r0 []*entities.AddressModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, int, int) ([]*entities.AddressModels, error)); ok {
		return rf(userID, page, perPage)
	}
	if rf, ok := ret.Get(0).(func(uint64, int, int) []*entities.AddressModels); ok {
		r0 = rf(userID, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.AddressModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, int, int) error); ok {
		r1 = rf(userID, page, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddressByID provides a mock function with given fields: addressID
func (_m *RepositoryAddressInterface) GetAddressByID(addressID uint64) (*entities.AddressModels, error) {
	ret := _m.Called(addressID)

	var r0 *entities.AddressModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*entities.AddressModels, error)); ok {
		return rf(addressID)
	}
	if rf, ok := ret.Get(0).(func(uint64) *entities.AddressModels); ok {
		r0 = rf(addressID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.AddressModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(addressID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrimaryAddressByUserID provides a mock function with given fields: userID
func (_m *RepositoryAddressInterface) GetPrimaryAddressByUserID(userID uint64) (*entities.AddressModels, error) {
	ret := _m.Called(userID)

	var r0 *entities.AddressModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*entities.AddressModels, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint64) *entities.AddressModels); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.AddressModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalAddressCountByUserID provides a mock function with given fields: userID
func (_m *RepositoryAddressInterface) GetTotalAddressCountByUserID(userID uint64) (int64, error) {
	ret := _m.Called(userID)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (int64, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint64) int64); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAddress provides a mock function with given fields: addressID, updatedAddress
func (_m *RepositoryAddressInterface) UpdateAddress(addressID uint64, updatedAddress *dto.UpdateAddressRequest) error {
	ret := _m.Called(addressID, updatedAddress)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, *dto.UpdateAddressRequest) error); ok {
		r0 = rf(addressID, updatedAddress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateIsPrimary provides a mock function with given fields: addressID, isPrimary
func (_m *RepositoryAddressInterface) UpdateIsPrimary(addressID uint64, isPrimary bool) error {
	ret := _m.Called(addressID, isPrimary)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, bool) error); ok {
		r0 = rf(addressID, isPrimary)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepositoryAddressInterface creates a new instance of RepositoryAddressInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryAddressInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryAddressInterface {
	mock := &RepositoryAddressInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
