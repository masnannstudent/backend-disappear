// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	entities "github.com/capstone-kelompok-7/backend-disappear/module/entities"
	mock "github.com/stretchr/testify/mock"
)

// RepositoryCategoryInterface is an autogenerated mock type for the RepositoryCategoryInterface type
type RepositoryCategoryInterface struct {
	mock.Mock
}

// CreateCategory provides a mock function with given fields: _a0
func (_m *RepositoryCategoryInterface) CreateCategory(_a0 *entities.CategoryModels) (*entities.CategoryModels, error) {
	ret := _m.Called(_a0)

	var r0 *entities.CategoryModels
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.CategoryModels) (*entities.CategoryModels, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entities.CategoryModels) *entities.CategoryModels); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.CategoryModels)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.CategoryModels) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCategoryById provides a mock function with given fields: categoryID
func (_m *RepositoryCategoryInterface) DeleteCategoryById(categoryID uint64) error {
	ret := _m.Called(categoryID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(categoryID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: page, perPage
func (_m *RepositoryCategoryInterface) FindAll(page int, perPage int) ([]*entities.CategoryModels, error) {
	ret := _m.Called(page, perPage)

	var r0 []*entities.CategoryModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*entities.CategoryModels, error)); ok {
		return rf(page, perPage)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*entities.CategoryModels); ok {
		r0 = rf(page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.CategoryModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: page, perPage, name
func (_m *RepositoryCategoryInterface) FindByName(page int, perPage int, name string) ([]*entities.CategoryModels, error) {
	ret := _m.Called(page, perPage, name)

	var r0 []*entities.CategoryModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]*entities.CategoryModels, error)); ok {
		return rf(page, perPage, name)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []*entities.CategoryModels); ok {
		r0 = rf(page, perPage, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.CategoryModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) error); ok {
		r1 = rf(page, perPage, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategoryById provides a mock function with given fields: categoryID
func (_m *RepositoryCategoryInterface) GetCategoryById(categoryID uint64) (*entities.CategoryModels, error) {
	ret := _m.Called(categoryID)

	var r0 *entities.CategoryModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*entities.CategoryModels, error)); ok {
		return rf(categoryID)
	}
	if rf, ok := ret.Get(0).(func(uint64) *entities.CategoryModels); ok {
		r0 = rf(categoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.CategoryModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(categoryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalCategoryCount provides a mock function with given fields:
func (_m *RepositoryCategoryInterface) GetTotalCategoryCount() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalCategoryCountByName provides a mock function with given fields: name
func (_m *RepositoryCategoryInterface) GetTotalCategoryCountByName(name string) (int64, error) {
	ret := _m.Called(name)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCategoryById provides a mock function with given fields: categoryID, updatedCategory
func (_m *RepositoryCategoryInterface) UpdateCategoryById(categoryID uint64, updatedCategory *entities.CategoryModels) error {
	ret := _m.Called(categoryID, updatedCategory)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, *entities.CategoryModels) error); ok {
		r0 = rf(categoryID, updatedCategory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepositoryCategoryInterface creates a new instance of RepositoryCategoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryCategoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryCategoryInterface {
	mock := &RepositoryCategoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
