// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	entities "github.com/capstone-kelompok-7/backend-disappear/module/entities"
	dto "github.com/capstone-kelompok-7/backend-disappear/module/feature/order/dto"

	mock "github.com/stretchr/testify/mock"
)

// ServiceOrderInterface is an autogenerated mock type for the ServiceOrderInterface type
type ServiceOrderInterface struct {
	mock.Mock
}

// AcceptOrder provides a mock function with given fields: orderID
func (_m *ServiceOrderInterface) AcceptOrder(orderID string) error {
	ret := _m.Called(orderID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CalculatePaginationValues provides a mock function with given fields: page, totalItems, perPage
func (_m *ServiceOrderInterface) CalculatePaginationValues(page int, totalItems int, perPage int) (int, int) {
	ret := _m.Called(page, totalItems, perPage)

	var r0 int
	var r1 int
	if rf, ok := ret.Get(0).(func(int, int, int) (int, int)); ok {
		return rf(page, totalItems, perPage)
	}
	if rf, ok := ret.Get(0).(func(int, int, int) int); ok {
		r0 = rf(page, totalItems, perPage)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int, int, int) int); ok {
		r1 = rf(page, totalItems, perPage)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// CallBack provides a mock function with given fields: notifPayload
func (_m *ServiceOrderInterface) CallBack(notifPayload map[string]interface{}) error {
	ret := _m.Called(notifPayload)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) error); ok {
		r0 = rf(notifPayload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CancelPayment provides a mock function with given fields: orderID
func (_m *ServiceOrderInterface) CancelPayment(orderID string) error {
	ret := _m.Called(orderID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConfirmPayment provides a mock function with given fields: orderID
func (_m *ServiceOrderInterface) ConfirmPayment(orderID string) error {
	ret := _m.Called(orderID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrder provides a mock function with given fields: userID, request
func (_m *ServiceOrderInterface) CreateOrder(userID uint64, request *dto.CreateOrderRequest) (interface{}, error) {
	ret := _m.Called(userID, request)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, *dto.CreateOrderRequest) (interface{}, error)); ok {
		return rf(userID, request)
	}
	if rf, ok := ret.Get(0).(func(uint64, *dto.CreateOrderRequest) interface{}); ok {
		r0 = rf(userID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, *dto.CreateOrderRequest) error); ok {
		r1 = rf(userID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrderFromCart provides a mock function with given fields: userID, request
func (_m *ServiceOrderInterface) CreateOrderFromCart(userID uint64, request *dto.CreateOrderCartRequest) (interface{}, error) {
	ret := _m.Called(userID, request)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, *dto.CreateOrderCartRequest) (interface{}, error)); ok {
		return rf(userID, request)
	}
	if rf, ok := ret.Get(0).(func(uint64, *dto.CreateOrderCartRequest) interface{}); ok {
		r0 = rf(userID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, *dto.CreateOrderCartRequest) error); ok {
		r1 = rf(userID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: page, perPage
func (_m *ServiceOrderInterface) GetAll(page int, perPage int) ([]*entities.OrderModels, int64, error) {
	ret := _m.Called(page, perPage)

	var r0 []*entities.OrderModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*entities.OrderModels, int64, error)); ok {
		return rf(page, perPage)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*entities.OrderModels); ok {
		r0 = rf(page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.OrderModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int64); ok {
		r1 = rf(page, perPage)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, perPage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllOrdersByUserID provides a mock function with given fields: userID
func (_m *ServiceOrderInterface) GetAllOrdersByUserID(userID uint64) ([]*entities.OrderModels, error) {
	ret := _m.Called(userID)

	var r0 []*entities.OrderModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) ([]*entities.OrderModels, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint64) []*entities.OrderModels); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.OrderModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllOrdersWithFilter provides a mock function with given fields: userID, orderStatus
func (_m *ServiceOrderInterface) GetAllOrdersWithFilter(userID uint64, orderStatus string) ([]*entities.OrderModels, error) {
	ret := _m.Called(userID, orderStatus)

	var r0 []*entities.OrderModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, string) ([]*entities.OrderModels, error)); ok {
		return rf(userID, orderStatus)
	}
	if rf, ok := ret.Get(0).(func(uint64, string) []*entities.OrderModels); ok {
		r0 = rf(userID, orderStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.OrderModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, string) error); ok {
		r1 = rf(userID, orderStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNextPage provides a mock function with given fields: currentPage, totalPages
func (_m *ServiceOrderInterface) GetNextPage(currentPage int, totalPages int) int {
	ret := _m.Called(currentPage, totalPages)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(currentPage, totalPages)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetOrderByDateRange provides a mock function with given fields: filterType, page, perPage
func (_m *ServiceOrderInterface) GetOrderByDateRange(filterType string, page int, perPage int) ([]*entities.OrderModels, int64, error) {
	ret := _m.Called(filterType, page, perPage)

	var r0 []*entities.OrderModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]*entities.OrderModels, int64, error)); ok {
		return rf(filterType, page, perPage)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []*entities.OrderModels); ok {
		r0 = rf(filterType, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.OrderModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) int64); ok {
		r1 = rf(filterType, page, perPage)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, int, int) error); ok {
		r2 = rf(filterType, page, perPage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOrderByDateRangeAndPaymentStatus provides a mock function with given fields: filterType, status, page, perPage
func (_m *ServiceOrderInterface) GetOrderByDateRangeAndPaymentStatus(filterType string, status string, page int, perPage int) ([]*entities.OrderModels, int64, error) {
	ret := _m.Called(filterType, status, page, perPage)

	var r0 []*entities.OrderModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, int, int) ([]*entities.OrderModels, int64, error)); ok {
		return rf(filterType, status, page, perPage)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int) []*entities.OrderModels); ok {
		r0 = rf(filterType, status, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.OrderModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int) int64); ok {
		r1 = rf(filterType, status, page, perPage)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, string, int, int) error); ok {
		r2 = rf(filterType, status, page, perPage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOrderByDateRangeAndPaymentStatusAndSearch provides a mock function with given fields: filterType, status, search, page, perPage
func (_m *ServiceOrderInterface) GetOrderByDateRangeAndPaymentStatusAndSearch(filterType string, status string, search string, page int, perPage int) ([]*entities.OrderModels, int64, error) {
	ret := _m.Called(filterType, status, search, page, perPage)

	var r0 []*entities.OrderModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, string, int, int) ([]*entities.OrderModels, int64, error)); ok {
		return rf(filterType, status, search, page, perPage)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, int, int) []*entities.OrderModels); ok {
		r0 = rf(filterType, status, search, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.OrderModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, int, int) int64); ok {
		r1 = rf(filterType, status, search, page, perPage)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, string, string, int, int) error); ok {
		r2 = rf(filterType, status, search, page, perPage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOrderByDateRangeAndStatus provides a mock function with given fields: filterType, status, page, perPage
func (_m *ServiceOrderInterface) GetOrderByDateRangeAndStatus(filterType string, status string, page int, perPage int) ([]*entities.OrderModels, int64, error) {
	ret := _m.Called(filterType, status, page, perPage)

	var r0 []*entities.OrderModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, int, int) ([]*entities.OrderModels, int64, error)); ok {
		return rf(filterType, status, page, perPage)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int) []*entities.OrderModels); ok {
		r0 = rf(filterType, status, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.OrderModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int) int64); ok {
		r1 = rf(filterType, status, page, perPage)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, string, int, int) error); ok {
		r2 = rf(filterType, status, page, perPage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOrderByDateRangeAndStatusAndSearch provides a mock function with given fields: filterType, status, search, page, perPage
func (_m *ServiceOrderInterface) GetOrderByDateRangeAndStatusAndSearch(filterType string, status string, search string, page int, perPage int) ([]*entities.OrderModels, int64, error) {
	ret := _m.Called(filterType, status, search, page, perPage)

	var r0 []*entities.OrderModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, string, int, int) ([]*entities.OrderModels, int64, error)); ok {
		return rf(filterType, status, search, page, perPage)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, int, int) []*entities.OrderModels); ok {
		r0 = rf(filterType, status, search, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.OrderModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, int, int) int64); ok {
		r1 = rf(filterType, status, search, page, perPage)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, string, string, int, int) error); ok {
		r2 = rf(filterType, status, search, page, perPage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOrderById provides a mock function with given fields: orderID
func (_m *ServiceOrderInterface) GetOrderById(orderID string) (*entities.OrderModels, error) {
	ret := _m.Called(orderID)

	var r0 *entities.OrderModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.OrderModels, error)); ok {
		return rf(orderID)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.OrderModels); ok {
		r0 = rf(orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.OrderModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByOrderStatus provides a mock function with given fields: orderStatus, page, perPage
func (_m *ServiceOrderInterface) GetOrderByOrderStatus(orderStatus string, page int, perPage int) ([]*entities.OrderModels, int64, error) {
	ret := _m.Called(orderStatus, page, perPage)

	var r0 []*entities.OrderModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]*entities.OrderModels, int64, error)); ok {
		return rf(orderStatus, page, perPage)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []*entities.OrderModels); ok {
		r0 = rf(orderStatus, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.OrderModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) int64); ok {
		r1 = rf(orderStatus, page, perPage)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, int, int) error); ok {
		r2 = rf(orderStatus, page, perPage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOrderByPaymentStatus provides a mock function with given fields: orderStatus, page, perPage
func (_m *ServiceOrderInterface) GetOrderByPaymentStatus(orderStatus string, page int, perPage int) ([]*entities.OrderModels, int64, error) {
	ret := _m.Called(orderStatus, page, perPage)

	var r0 []*entities.OrderModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]*entities.OrderModels, int64, error)); ok {
		return rf(orderStatus, page, perPage)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []*entities.OrderModels); ok {
		r0 = rf(orderStatus, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.OrderModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) int64); ok {
		r1 = rf(orderStatus, page, perPage)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, int, int) error); ok {
		r2 = rf(orderStatus, page, perPage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOrderBySearchAndDateRange provides a mock function with given fields: filterType, search, page, perPage
func (_m *ServiceOrderInterface) GetOrderBySearchAndDateRange(filterType string, search string, page int, perPage int) ([]*entities.OrderModels, int64, error) {
	ret := _m.Called(filterType, search, page, perPage)

	var r0 []*entities.OrderModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, int, int) ([]*entities.OrderModels, int64, error)); ok {
		return rf(filterType, search, page, perPage)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int) []*entities.OrderModels); ok {
		r0 = rf(filterType, search, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.OrderModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int) int64); ok {
		r1 = rf(filterType, search, page, perPage)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, string, int, int) error); ok {
		r2 = rf(filterType, search, page, perPage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOrdersByName provides a mock function with given fields: page, perPage, name
func (_m *ServiceOrderInterface) GetOrdersByName(page int, perPage int, name string) ([]*entities.OrderModels, int64, error) {
	ret := _m.Called(page, perPage, name)

	var r0 []*entities.OrderModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]*entities.OrderModels, int64, error)); ok {
		return rf(page, perPage, name)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []*entities.OrderModels); ok {
		r0 = rf(page, perPage, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.OrderModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) int64); ok {
		r1 = rf(page, perPage, name)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string) error); ok {
		r2 = rf(page, perPage, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOrdersBySearchAndPaymentStatus provides a mock function with given fields: status, search, page, perPage
func (_m *ServiceOrderInterface) GetOrdersBySearchAndPaymentStatus(status string, search string, page int, perPage int) ([]*entities.OrderModels, int64, error) {
	ret := _m.Called(status, search, page, perPage)

	var r0 []*entities.OrderModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, int, int) ([]*entities.OrderModels, int64, error)); ok {
		return rf(status, search, page, perPage)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int) []*entities.OrderModels); ok {
		r0 = rf(status, search, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.OrderModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int) int64); ok {
		r1 = rf(status, search, page, perPage)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, string, int, int) error); ok {
		r2 = rf(status, search, page, perPage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOrdersBySearchAndStatus provides a mock function with given fields: status, search, page, perPage
func (_m *ServiceOrderInterface) GetOrdersBySearchAndStatus(status string, search string, page int, perPage int) ([]*entities.OrderModels, int64, error) {
	ret := _m.Called(status, search, page, perPage)

	var r0 []*entities.OrderModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, int, int) ([]*entities.OrderModels, int64, error)); ok {
		return rf(status, search, page, perPage)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int) []*entities.OrderModels); ok {
		r0 = rf(status, search, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.OrderModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int) int64); ok {
		r1 = rf(status, search, page, perPage)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, string, int, int) error); ok {
		r2 = rf(status, search, page, perPage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPrevPage provides a mock function with given fields: currentPage
func (_m *ServiceOrderInterface) GetPrevPage(currentPage int) int {
	ret := _m.Called(currentPage)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(currentPage)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ProcessGatewayPayment provides a mock function with given fields: totalAmountPaid, orderID, paymentMethod
func (_m *ServiceOrderInterface) ProcessGatewayPayment(totalAmountPaid uint64, orderID string, paymentMethod string) (interface{}, error) {
	ret := _m.Called(totalAmountPaid, orderID, paymentMethod)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, string, string) (interface{}, error)); ok {
		return rf(totalAmountPaid, orderID, paymentMethod)
	}
	if rf, ok := ret.Get(0).(func(uint64, string, string) interface{}); ok {
		r0 = rf(totalAmountPaid, orderID, paymentMethod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, string, string) error); ok {
		r1 = rf(totalAmountPaid, orderID, paymentMethod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessManualPayment provides a mock function with given fields: orderID
func (_m *ServiceOrderInterface) ProcessManualPayment(orderID string) (*entities.OrderModels, error) {
	ret := _m.Called(orderID)

	var r0 *entities.OrderModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.OrderModels, error)); ok {
		return rf(orderID)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.OrderModels); ok {
		r0 = rf(orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.OrderModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendNotificationOrder provides a mock function with given fields: request
func (_m *ServiceOrderInterface) SendNotificationOrder(request dto.SendNotificationOrderRequest) (string, error) {
	ret := _m.Called(request)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.SendNotificationOrderRequest) (string, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(dto.SendNotificationOrderRequest) string); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(dto.SendNotificationOrderRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendNotificationPayment provides a mock function with given fields: request
func (_m *ServiceOrderInterface) SendNotificationPayment(request dto.SendNotificationPaymentRequest) (string, error) {
	ret := _m.Called(request)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.SendNotificationPaymentRequest) (string, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(dto.SendNotificationPaymentRequest) string); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(dto.SendNotificationPaymentRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tracking provides a mock function with given fields: courier, awb
func (_m *ServiceOrderInterface) Tracking(courier string, awb string) (map[string]interface{}, error) {
	ret := _m.Called(courier, awb)

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (map[string]interface{}, error)); ok {
		return rf(courier, awb)
	}
	if rf, ok := ret.Get(0).(func(string, string) map[string]interface{}); ok {
		r0 = rf(courier, awb)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(courier, awb)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrderStatus provides a mock function with given fields: req
func (_m *ServiceOrderInterface) UpdateOrderStatus(req *dto.UpdateOrderStatus) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.UpdateOrderStatus) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewServiceOrderInterface creates a new instance of ServiceOrderInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceOrderInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceOrderInterface {
	mock := &ServiceOrderInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
