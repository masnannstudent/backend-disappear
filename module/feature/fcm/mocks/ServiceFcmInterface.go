// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	entities "github.com/capstone-kelompok-7/backend-disappear/module/entities"

	mock "github.com/stretchr/testify/mock"

	sendnotif "github.com/capstone-kelompok-7/backend-disappear/utils/sendnotif"
)

// ServiceFcmInterface is an autogenerated mock type for the ServiceFcmInterface type
type ServiceFcmInterface struct {
	mock.Mock
}

// CreateFcm provides a mock function with given fields: request
func (_m *ServiceFcmInterface) CreateFcm(request sendnotif.SendNotificationRequest) (string, *entities.FcmModels, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for CreateFcm")
	}

	var r0 string
	var r1 *entities.FcmModels
	var r2 error
	if rf, ok := ret.Get(0).(func(sendnotif.SendNotificationRequest) (string, *entities.FcmModels, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(sendnotif.SendNotificationRequest) string); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(sendnotif.SendNotificationRequest) *entities.FcmModels); ok {
		r1 = rf(request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*entities.FcmModels)
		}
	}

	if rf, ok := ret.Get(2).(func(sendnotif.SendNotificationRequest) error); ok {
		r2 = rf(request)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteFcmById provides a mock function with given fields: id
func (_m *ServiceFcmInterface) DeleteFcmById(id uint64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFcmById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFcmById provides a mock function with given fields: id
func (_m *ServiceFcmInterface) GetFcmById(id uint64) (*entities.FcmModels, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetFcmById")
	}

	var r0 *entities.FcmModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*entities.FcmModels, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint64) *entities.FcmModels); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.FcmModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFcmByIdUser provides a mock function with given fields: id
func (_m *ServiceFcmInterface) GetFcmByIdUser(id uint64) ([]*entities.FcmModels, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetFcmByIdUser")
	}

	var r0 []*entities.FcmModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) ([]*entities.FcmModels, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint64) []*entities.FcmModels); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.FcmModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServiceFcmInterface creates a new instance of ServiceFcmInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceFcmInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceFcmInterface {
	mock := &ServiceFcmInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
