// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	entities "github.com/capstone-kelompok-7/backend-disappear/module/entities"

	mock "github.com/stretchr/testify/mock"
)

// ServiceHomepageInterface is an autogenerated mock type for the ServiceHomepageInterface type
type ServiceHomepageInterface struct {
	mock.Mock
}

// GetArticle provides a mock function with given fields:
func (_m *ServiceHomepageInterface) GetArticle() ([]*entities.ArticleModels, error) {
	ret := _m.Called()

	var r0 []*entities.ArticleModels
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.ArticleModels, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.ArticleModels); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ArticleModels)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBestSellingProducts provides a mock function with given fields: limit
func (_m *ServiceHomepageInterface) GetBestSellingProducts(limit int) ([]*entities.ProductModels, error) {
	ret := _m.Called(limit)

	var r0 []*entities.ProductModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]*entities.ProductModels, error)); ok {
		return rf(limit)
	}
	if rf, ok := ret.Get(0).(func(int) []*entities.ProductModels); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCarousel provides a mock function with given fields:
func (_m *ServiceHomepageInterface) GetCarousel() ([]*entities.CarouselModels, error) {
	ret := _m.Called()

	var r0 []*entities.CarouselModels
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.CarouselModels, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.CarouselModels); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.CarouselModels)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategory provides a mock function with given fields:
func (_m *ServiceHomepageInterface) GetCategory() ([]*entities.CategoryModels, error) {
	ret := _m.Called()

	var r0 []*entities.CategoryModels
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.CategoryModels, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.CategoryModels); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.CategoryModels)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChallenge provides a mock function with given fields:
func (_m *ServiceHomepageInterface) GetChallenge() ([]*entities.ChallengeModels, error) {
	ret := _m.Called()

	var r0 []*entities.ChallengeModels
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.ChallengeModels, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.ChallengeModels); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ChallengeModels)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServiceHomepageInterface creates a new instance of ServiceHomepageInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceHomepageInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceHomepageInterface {
	mock := &ServiceHomepageInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
