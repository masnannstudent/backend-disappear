// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	entities "github.com/capstone-kelompok-7/backend-disappear/module/entities"
	mock "github.com/stretchr/testify/mock"
)

// RepositoryVoucherInterface is an autogenerated mock type for the RepositoryVoucherInterface type
type RepositoryVoucherInterface struct {
	mock.Mock
}

// ClaimVoucher provides a mock function with given fields: claimVoucher
func (_m *RepositoryVoucherInterface) ClaimVoucher(claimVoucher *entities.VoucherClaimModels) error {
	ret := _m.Called(claimVoucher)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.VoucherClaimModels) error); ok {
		r0 = rf(claimVoucher)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateVoucher provides a mock function with given fields: newData
func (_m *RepositoryVoucherInterface) CreateVoucher(newData *entities.VoucherModels) (*entities.VoucherModels, error) {
	ret := _m.Called(newData)

	var r0 *entities.VoucherModels
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.VoucherModels) (*entities.VoucherModels, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(*entities.VoucherModels) *entities.VoucherModels); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.VoucherModels)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.VoucherModels) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserVoucherClaims provides a mock function with given fields: userID, voucherID
func (_m *RepositoryVoucherInterface) DeleteUserVoucherClaims(userID uint64, voucherID uint64) error {
	ret := _m.Called(userID, voucherID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(userID, voucherID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteVoucher provides a mock function with given fields: voucherID
func (_m *RepositoryVoucherInterface) DeleteVoucher(voucherID uint64) error {
	ret := _m.Called(voucherID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(voucherID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllVoucher provides a mock function with given fields: page, perPage
func (_m *RepositoryVoucherInterface) FindAllVoucher(page int, perPage int) ([]*entities.VoucherModels, error) {
	ret := _m.Called(page, perPage)

	var r0 []*entities.VoucherModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*entities.VoucherModels, error)); ok {
		return rf(page, perPage)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*entities.VoucherModels); ok {
		r0 = rf(page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.VoucherModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllVoucherToClaims provides a mock function with given fields: limit, userID
func (_m *RepositoryVoucherInterface) FindAllVoucherToClaims(limit int, userID uint64) ([]*entities.VoucherModels, error) {
	ret := _m.Called(limit, userID)

	var r0 []*entities.VoucherModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int, uint64) ([]*entities.VoucherModels, error)); ok {
		return rf(limit, userID)
	}
	if rf, ok := ret.Get(0).(func(int, uint64) []*entities.VoucherModels); ok {
		r0 = rf(limit, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.VoucherModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, uint64) error); ok {
		r1 = rf(limit, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByCategory provides a mock function with given fields: page, perPage, category
func (_m *RepositoryVoucherInterface) FindByCategory(page int, perPage int, category string) ([]*entities.VoucherModels, error) {
	ret := _m.Called(page, perPage, category)

	var r0 []*entities.VoucherModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]*entities.VoucherModels, error)); ok {
		return rf(page, perPage, category)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []*entities.VoucherModels); ok {
		r0 = rf(page, perPage, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.VoucherModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) error); ok {
		r1 = rf(page, perPage, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByStatus provides a mock function with given fields: page, perPage, status
func (_m *RepositoryVoucherInterface) FindByStatus(page int, perPage int, status string) ([]*entities.VoucherModels, error) {
	ret := _m.Called(page, perPage, status)

	var r0 []*entities.VoucherModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]*entities.VoucherModels, error)); ok {
		return rf(page, perPage, status)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []*entities.VoucherModels); ok {
		r0 = rf(page, perPage, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.VoucherModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) error); ok {
		r1 = rf(page, perPage, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByStatusCategory provides a mock function with given fields: page, perPage, status, category
func (_m *RepositoryVoucherInterface) FindByStatusCategory(page int, perPage int, status string, category string) ([]*entities.VoucherModels, error) {
	ret := _m.Called(page, perPage, status, category)

	var r0 []*entities.VoucherModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, string, string) ([]*entities.VoucherModels, error)); ok {
		return rf(page, perPage, status, category)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, string) []*entities.VoucherModels); ok {
		r0 = rf(page, perPage, status, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.VoucherModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, string) error); ok {
		r1 = rf(page, perPage, status, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalVoucherCount provides a mock function with given fields:
func (_m *RepositoryVoucherInterface) GetTotalVoucherCount() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalVoucherCountByCategory provides a mock function with given fields: category
func (_m *RepositoryVoucherInterface) GetTotalVoucherCountByCategory(category string) (int64, error) {
	ret := _m.Called(category)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(category)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(category)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalVoucherCountByStatus provides a mock function with given fields: status
func (_m *RepositoryVoucherInterface) GetTotalVoucherCountByStatus(status string) (int64, error) {
	ret := _m.Called(status)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(status)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(status)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalVoucherCountByStatusCategory provides a mock function with given fields: status, category
func (_m *RepositoryVoucherInterface) GetTotalVoucherCountByStatusCategory(status string, category string) (int64, error) {
	ret := _m.Called(status, category)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (int64, error)); ok {
		return rf(status, category)
	}
	if rf, ok := ret.Get(0).(func(string, string) int64); ok {
		r0 = rf(status, category)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(status, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserVoucherClaims provides a mock function with given fields: userID
func (_m *RepositoryVoucherInterface) GetUserVoucherClaims(userID uint64) ([]*entities.VoucherClaimModels, error) {
	ret := _m.Called(userID)

	var r0 []*entities.VoucherClaimModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) ([]*entities.VoucherClaimModels, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint64) []*entities.VoucherClaimModels); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.VoucherClaimModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoucherByCode provides a mock function with given fields: code
func (_m *RepositoryVoucherInterface) GetVoucherByCode(code string) (*entities.VoucherModels, error) {
	ret := _m.Called(code)

	var r0 *entities.VoucherModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.VoucherModels, error)); ok {
		return rf(code)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.VoucherModels); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.VoucherModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoucherById provides a mock function with given fields: voucherID
func (_m *RepositoryVoucherInterface) GetVoucherById(voucherID uint64) (*entities.VoucherModels, error) {
	ret := _m.Called(voucherID)

	var r0 *entities.VoucherModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*entities.VoucherModels, error)); ok {
		return rf(voucherID)
	}
	if rf, ok := ret.Get(0).(func(uint64) *entities.VoucherModels); ok {
		r0 = rf(voucherID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.VoucherModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(voucherID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoucherCategory provides a mock function with given fields: voucherID
func (_m *RepositoryVoucherInterface) GetVoucherCategory(voucherID uint64) (string, error) {
	ret := _m.Called(voucherID)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (string, error)); ok {
		return rf(voucherID)
	}
	if rf, ok := ret.Get(0).(func(uint64) string); ok {
		r0 = rf(voucherID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(voucherID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsVoucherAlreadyClaimed provides a mock function with given fields: userID, voucherID
func (_m *RepositoryVoucherInterface) IsVoucherAlreadyClaimed(userID uint64, voucherID uint64) (bool, error) {
	ret := _m.Called(userID, voucherID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) (bool, error)); ok {
		return rf(userID, voucherID)
	}
	if rf, ok := ret.Get(0).(func(uint64, uint64) bool); ok {
		r0 = rf(userID, voucherID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uint64, uint64) error); ok {
		r1 = rf(userID, voucherID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReduceStockWhenClaimed provides a mock function with given fields: voucherID, quantity
func (_m *RepositoryVoucherInterface) ReduceStockWhenClaimed(voucherID uint64, quantity uint64) error {
	ret := _m.Called(voucherID, quantity)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(voucherID, quantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateVoucher provides a mock function with given fields: voucherID, updatedVoucher
func (_m *RepositoryVoucherInterface) UpdateVoucher(voucherID uint64, updatedVoucher *entities.VoucherModels) error {
	ret := _m.Called(voucherID, updatedVoucher)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, *entities.VoucherModels) error); ok {
		r0 = rf(voucherID, updatedVoucher)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepositoryVoucherInterface creates a new instance of RepositoryVoucherInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryVoucherInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryVoucherInterface {
	mock := &RepositoryVoucherInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
