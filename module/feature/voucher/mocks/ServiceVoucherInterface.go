// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	entities "github.com/capstone-kelompok-7/backend-disappear/module/entities"
	mock "github.com/stretchr/testify/mock"
)

// ServiceVoucherInterface is an autogenerated mock type for the ServiceVoucherInterface type
type ServiceVoucherInterface struct {
	mock.Mock
}

// CalculatePaginationValues provides a mock function with given fields: page, totalItems, perPage
func (_m *ServiceVoucherInterface) CalculatePaginationValues(page int, totalItems int, perPage int) (int, int) {
	ret := _m.Called(page, totalItems, perPage)

	var r0 int
	var r1 int
	if rf, ok := ret.Get(0).(func(int, int, int) (int, int)); ok {
		return rf(page, totalItems, perPage)
	}
	if rf, ok := ret.Get(0).(func(int, int, int) int); ok {
		r0 = rf(page, totalItems, perPage)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int, int, int) int); ok {
		r1 = rf(page, totalItems, perPage)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// CanClaimsVoucher provides a mock function with given fields: userID, voucherID
func (_m *ServiceVoucherInterface) CanClaimsVoucher(userID uint64, voucherID uint64) (bool, error) {
	ret := _m.Called(userID, voucherID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) (bool, error)); ok {
		return rf(userID, voucherID)
	}
	if rf, ok := ret.Get(0).(func(uint64, uint64) bool); ok {
		r0 = rf(userID, voucherID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uint64, uint64) error); ok {
		r1 = rf(userID, voucherID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClaimVoucher provides a mock function with given fields: req
func (_m *ServiceVoucherInterface) ClaimVoucher(req *entities.VoucherClaimModels) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.VoucherClaimModels) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateVoucher provides a mock function with given fields: newData
func (_m *ServiceVoucherInterface) CreateVoucher(newData *entities.VoucherModels) (*entities.VoucherModels, error) {
	ret := _m.Called(newData)

	var r0 *entities.VoucherModels
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.VoucherModels) (*entities.VoucherModels, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(*entities.VoucherModels) *entities.VoucherModels); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.VoucherModels)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.VoucherModels) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVoucher provides a mock function with given fields: voucherID
func (_m *ServiceVoucherInterface) DeleteVoucher(voucherID uint64) error {
	ret := _m.Called(voucherID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(voucherID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteVoucherClaims provides a mock function with given fields: userID, voucherID
func (_m *ServiceVoucherInterface) DeleteVoucherClaims(userID uint64, voucherID uint64) error {
	ret := _m.Called(userID, voucherID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(userID, voucherID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllVoucher provides a mock function with given fields: page, perPage
func (_m *ServiceVoucherInterface) GetAllVoucher(page int, perPage int) ([]*entities.VoucherModels, int64, error) {
	ret := _m.Called(page, perPage)

	var r0 []*entities.VoucherModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*entities.VoucherModels, int64, error)); ok {
		return rf(page, perPage)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*entities.VoucherModels); ok {
		r0 = rf(page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.VoucherModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int64); ok {
		r1 = rf(page, perPage)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, perPage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllVoucherToClaims provides a mock function with given fields: limit, userID
func (_m *ServiceVoucherInterface) GetAllVoucherToClaims(limit int, userID uint64) ([]*entities.VoucherModels, error) {
	ret := _m.Called(limit, userID)

	var r0 []*entities.VoucherModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int, uint64) ([]*entities.VoucherModels, error)); ok {
		return rf(limit, userID)
	}
	if rf, ok := ret.Get(0).(func(int, uint64) []*entities.VoucherModels); ok {
		r0 = rf(limit, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.VoucherModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, uint64) error); ok {
		r1 = rf(limit, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNextPage provides a mock function with given fields: currentPage, totalPages
func (_m *ServiceVoucherInterface) GetNextPage(currentPage int, totalPages int) int {
	ret := _m.Called(currentPage, totalPages)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(currentPage, totalPages)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetPrevPage provides a mock function with given fields: currentPage
func (_m *ServiceVoucherInterface) GetPrevPage(currentPage int) int {
	ret := _m.Called(currentPage)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(currentPage)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetUserVouchers provides a mock function with given fields: userID
func (_m *ServiceVoucherInterface) GetUserVouchers(userID uint64) ([]*entities.VoucherClaimModels, error) {
	ret := _m.Called(userID)

	var r0 []*entities.VoucherClaimModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) ([]*entities.VoucherClaimModels, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint64) []*entities.VoucherClaimModels); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.VoucherClaimModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoucherByCategory provides a mock function with given fields: page, perPage, category
func (_m *ServiceVoucherInterface) GetVoucherByCategory(page int, perPage int, category string) ([]*entities.VoucherModels, int64, error) {
	ret := _m.Called(page, perPage, category)

	var r0 []*entities.VoucherModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]*entities.VoucherModels, int64, error)); ok {
		return rf(page, perPage, category)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []*entities.VoucherModels); ok {
		r0 = rf(page, perPage, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.VoucherModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) int64); ok {
		r1 = rf(page, perPage, category)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string) error); ok {
		r2 = rf(page, perPage, category)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetVoucherById provides a mock function with given fields: voucherID
func (_m *ServiceVoucherInterface) GetVoucherById(voucherID uint64) (*entities.VoucherModels, error) {
	ret := _m.Called(voucherID)

	var r0 *entities.VoucherModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*entities.VoucherModels, error)); ok {
		return rf(voucherID)
	}
	if rf, ok := ret.Get(0).(func(uint64) *entities.VoucherModels); ok {
		r0 = rf(voucherID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.VoucherModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(voucherID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoucherByStatus provides a mock function with given fields: page, perPage, status
func (_m *ServiceVoucherInterface) GetVoucherByStatus(page int, perPage int, status string) ([]*entities.VoucherModels, int64, error) {
	ret := _m.Called(page, perPage, status)

	var r0 []*entities.VoucherModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]*entities.VoucherModels, int64, error)); ok {
		return rf(page, perPage, status)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []*entities.VoucherModels); ok {
		r0 = rf(page, perPage, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.VoucherModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) int64); ok {
		r1 = rf(page, perPage, status)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string) error); ok {
		r2 = rf(page, perPage, status)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetVoucherByStatusCategory provides a mock function with given fields: page, perPage, status, category
func (_m *ServiceVoucherInterface) GetVoucherByStatusCategory(page int, perPage int, status string, category string) ([]*entities.VoucherModels, int64, error) {
	ret := _m.Called(page, perPage, status, category)

	var r0 []*entities.VoucherModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string, string) ([]*entities.VoucherModels, int64, error)); ok {
		return rf(page, perPage, status, category)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, string) []*entities.VoucherModels); ok {
		r0 = rf(page, perPage, status, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.VoucherModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, string) int64); ok {
		r1 = rf(page, perPage, status, category)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string, string) error); ok {
		r2 = rf(page, perPage, status, category)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateVoucher provides a mock function with given fields: voucherID, req
func (_m *ServiceVoucherInterface) UpdateVoucher(voucherID uint64, req *entities.VoucherModels) error {
	ret := _m.Called(voucherID, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, *entities.VoucherModels) error); ok {
		r0 = rf(voucherID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewServiceVoucherInterface creates a new instance of ServiceVoucherInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceVoucherInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceVoucherInterface {
	mock := &ServiceVoucherInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
