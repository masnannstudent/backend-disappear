// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	entities "github.com/capstone-kelompok-7/backend-disappear/module/entities"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// RepositoryArticleInterface is an autogenerated mock type for the RepositoryArticleInterface type
type RepositoryArticleInterface struct {
	mock.Mock
}

// BookmarkArticle provides a mock function with given fields: bookmarkArticle
func (_m *RepositoryArticleInterface) BookmarkArticle(bookmarkArticle *entities.ArticleBookmarkModels) error {
	ret := _m.Called(bookmarkArticle)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.ArticleBookmarkModels) error); ok {
		r0 = rf(bookmarkArticle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateArticle provides a mock function with given fields: _a0
func (_m *RepositoryArticleInterface) CreateArticle(_a0 *entities.ArticleModels) (*entities.ArticleModels, error) {
	ret := _m.Called(_a0)

	var r0 *entities.ArticleModels
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.ArticleModels) (*entities.ArticleModels, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entities.ArticleModels) *entities.ArticleModels); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ArticleModels)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.ArticleModels) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteArticleById provides a mock function with given fields: id
func (_m *RepositoryArticleInterface) DeleteArticleById(id uint64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBookmarkArticle provides a mock function with given fields: userID, articleID
func (_m *RepositoryArticleInterface) DeleteBookmarkArticle(userID uint64, articleID uint64) error {
	ret := _m.Called(userID, articleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(userID, articleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *RepositoryArticleInterface) FindAll() ([]*entities.ArticleModels, error) {
	ret := _m.Called()

	var r0 []*entities.ArticleModels
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.ArticleModels, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.ArticleModels); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ArticleModels)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllArticle provides a mock function with given fields: page, perPage
func (_m *RepositoryArticleInterface) FindAllArticle(page int, perPage int) ([]*entities.ArticleModels, error) {
	ret := _m.Called(page, perPage)

	var r0 []*entities.ArticleModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*entities.ArticleModels, error)); ok {
		return rf(page, perPage)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*entities.ArticleModels); ok {
		r0 = rf(page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ArticleModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByTitle provides a mock function with given fields: title
func (_m *RepositoryArticleInterface) FindByTitle(title string) ([]*entities.ArticleModels, error) {
	ret := _m.Called(title)

	var r0 []*entities.ArticleModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*entities.ArticleModels, error)); ok {
		return rf(title)
	}
	if rf, ok := ret.Get(0).(func(string) []*entities.ArticleModels); ok {
		r0 = rf(title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ArticleModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticleAlphabet provides a mock function with given fields: page, perPage
func (_m *RepositoryArticleInterface) GetArticleAlphabet(page int, perPage int) ([]*entities.ArticleModels, error) {
	ret := _m.Called(page, perPage)

	var r0 []*entities.ArticleModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*entities.ArticleModels, error)); ok {
		return rf(page, perPage)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*entities.ArticleModels); ok {
		r0 = rf(page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ArticleModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticleById provides a mock function with given fields: id
func (_m *RepositoryArticleInterface) GetArticleById(id uint64) (*entities.ArticleModels, error) {
	ret := _m.Called(id)

	var r0 *entities.ArticleModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*entities.ArticleModels, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint64) *entities.ArticleModels); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ArticleModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticleMostViews provides a mock function with given fields: page, perPage
func (_m *RepositoryArticleInterface) GetArticleMostViews(page int, perPage int) ([]*entities.ArticleModels, error) {
	ret := _m.Called(page, perPage)

	var r0 []*entities.ArticleModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*entities.ArticleModels, error)); ok {
		return rf(page, perPage)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*entities.ArticleModels); ok {
		r0 = rf(page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ArticleModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticlesByDateRange provides a mock function with given fields: startDate, endDate
func (_m *RepositoryArticleInterface) GetArticlesByDateRange(startDate time.Time, endDate time.Time) ([]*entities.ArticleModels, error) {
	ret := _m.Called(startDate, endDate)

	var r0 []*entities.ArticleModels
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) ([]*entities.ArticleModels, error)); ok {
		return rf(startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) []*entities.ArticleModels); ok {
		r0 = rf(startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ArticleModels)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time, time.Time) error); ok {
		r1 = rf(startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestArticle provides a mock function with given fields:
func (_m *RepositoryArticleInterface) GetLatestArticle() ([]*entities.ArticleModels, error) {
	ret := _m.Called()

	var r0 []*entities.ArticleModels
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.ArticleModels, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.ArticleModels); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ArticleModels)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOldestArticle provides a mock function with given fields: page, perPage
func (_m *RepositoryArticleInterface) GetOldestArticle(page int, perPage int) ([]*entities.ArticleModels, error) {
	ret := _m.Called(page, perPage)

	var r0 []*entities.ArticleModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*entities.ArticleModels, error)); ok {
		return rf(page, perPage)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*entities.ArticleModels); ok {
		r0 = rf(page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ArticleModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOtherArticle provides a mock function with given fields:
func (_m *RepositoryArticleInterface) GetOtherArticle() ([]*entities.ArticleModels, error) {
	ret := _m.Called()

	var r0 []*entities.ArticleModels
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.ArticleModels, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.ArticleModels); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ArticleModels)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalArticleCount provides a mock function with given fields:
func (_m *RepositoryArticleInterface) GetTotalArticleCount() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserBookmarkArticle provides a mock function with given fields: userID
func (_m *RepositoryArticleInterface) GetUserBookmarkArticle(userID uint64) ([]*entities.ArticleBookmarkModels, error) {
	ret := _m.Called(userID)

	var r0 []*entities.ArticleBookmarkModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) ([]*entities.ArticleBookmarkModels, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint64) []*entities.ArticleBookmarkModels); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ArticleBookmarkModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsArticleAlreadyBookmarked provides a mock function with given fields: userID, articleID
func (_m *RepositoryArticleInterface) IsArticleAlreadyBookmarked(userID uint64, articleID uint64) (bool, error) {
	ret := _m.Called(userID, articleID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) (bool, error)); ok {
		return rf(userID, articleID)
	}
	if rf, ok := ret.Get(0).(func(uint64, uint64) bool); ok {
		r0 = rf(userID, articleID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uint64, uint64) error); ok {
		r1 = rf(userID, articleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchArticlesWithDateFilter provides a mock function with given fields: searchText, startDate, endDate
func (_m *RepositoryArticleInterface) SearchArticlesWithDateFilter(searchText string, startDate time.Time, endDate time.Time) ([]*entities.ArticleModels, error) {
	ret := _m.Called(searchText, startDate, endDate)

	var r0 []*entities.ArticleModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string, time.Time, time.Time) ([]*entities.ArticleModels, error)); ok {
		return rf(searchText, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(string, time.Time, time.Time) []*entities.ArticleModels); ok {
		r0 = rf(searchText, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ArticleModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string, time.Time, time.Time) error); ok {
		r1 = rf(searchText, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateArticleById provides a mock function with given fields: id, updatedArticle
func (_m *RepositoryArticleInterface) UpdateArticleById(id uint64, updatedArticle *entities.ArticleModels) (*entities.ArticleModels, error) {
	ret := _m.Called(id, updatedArticle)

	var r0 *entities.ArticleModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, *entities.ArticleModels) (*entities.ArticleModels, error)); ok {
		return rf(id, updatedArticle)
	}
	if rf, ok := ret.Get(0).(func(uint64, *entities.ArticleModels) *entities.ArticleModels); ok {
		r0 = rf(id, updatedArticle)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ArticleModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, *entities.ArticleModels) error); ok {
		r1 = rf(id, updatedArticle)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateArticleViews provides a mock function with given fields: _a0
func (_m *RepositoryArticleInterface) UpdateArticleViews(_a0 *entities.ArticleModels) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.ArticleModels) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepositoryArticleInterface creates a new instance of RepositoryArticleInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryArticleInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryArticleInterface {
	mock := &RepositoryArticleInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
