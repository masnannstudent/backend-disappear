// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	entities "github.com/capstone-kelompok-7/backend-disappear/module/entities"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ServiceArticleInterface is an autogenerated mock type for the ServiceArticleInterface type
type ServiceArticleInterface struct {
	mock.Mock
}

// BookmarkArticle provides a mock function with given fields: bookmark
func (_m *ServiceArticleInterface) BookmarkArticle(bookmark *entities.ArticleBookmarkModels) error {
	ret := _m.Called(bookmark)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.ArticleBookmarkModels) error); ok {
		r0 = rf(bookmark)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CalculatePaginationValues provides a mock function with given fields: page, totalItems, perPage
func (_m *ServiceArticleInterface) CalculatePaginationValues(page int, totalItems int, perPage int) (int, int) {
	ret := _m.Called(page, totalItems, perPage)

	var r0 int
	var r1 int
	if rf, ok := ret.Get(0).(func(int, int, int) (int, int)); ok {
		return rf(page, totalItems, perPage)
	}
	if rf, ok := ret.Get(0).(func(int, int, int) int); ok {
		r0 = rf(page, totalItems, perPage)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int, int, int) int); ok {
		r1 = rf(page, totalItems, perPage)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// CreateArticle provides a mock function with given fields: articleData
func (_m *ServiceArticleInterface) CreateArticle(articleData *entities.ArticleModels) (*entities.ArticleModels, error) {
	ret := _m.Called(articleData)

	var r0 *entities.ArticleModels
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.ArticleModels) (*entities.ArticleModels, error)); ok {
		return rf(articleData)
	}
	if rf, ok := ret.Get(0).(func(*entities.ArticleModels) *entities.ArticleModels); ok {
		r0 = rf(articleData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ArticleModels)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.ArticleModels) error); ok {
		r1 = rf(articleData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteArticleById provides a mock function with given fields: id
func (_m *ServiceArticleInterface) DeleteArticleById(id uint64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBookmarkArticle provides a mock function with given fields: userID, articleID
func (_m *ServiceArticleInterface) DeleteBookmarkArticle(userID uint64, articleID uint64) error {
	ret := _m.Called(userID, articleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(userID, articleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *ServiceArticleInterface) GetAll() ([]*entities.ArticleModels, error) {
	ret := _m.Called()

	var r0 []*entities.ArticleModels
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.ArticleModels, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.ArticleModels); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ArticleModels)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllArticleUser provides a mock function with given fields: page, perPage
func (_m *ServiceArticleInterface) GetAllArticleUser(page int, perPage int) ([]*entities.ArticleModels, int64, error) {
	ret := _m.Called(page, perPage)

	var r0 []*entities.ArticleModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*entities.ArticleModels, int64, error)); ok {
		return rf(page, perPage)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*entities.ArticleModels); ok {
		r0 = rf(page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ArticleModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int64); ok {
		r1 = rf(page, perPage)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, perPage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetArticleById provides a mock function with given fields: id, incrementVIews
func (_m *ServiceArticleInterface) GetArticleById(id uint64, incrementVIews bool) (*entities.ArticleModels, error) {
	ret := _m.Called(id, incrementVIews)

	var r0 *entities.ArticleModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, bool) (*entities.ArticleModels, error)); ok {
		return rf(id, incrementVIews)
	}
	if rf, ok := ret.Get(0).(func(uint64, bool) *entities.ArticleModels); ok {
		r0 = rf(id, incrementVIews)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ArticleModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, bool) error); ok {
		r1 = rf(id, incrementVIews)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticleMostViews provides a mock function with given fields: page, perPage
func (_m *ServiceArticleInterface) GetArticleMostViews(page int, perPage int) ([]*entities.ArticleModels, int64, error) {
	ret := _m.Called(page, perPage)

	var r0 []*entities.ArticleModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*entities.ArticleModels, int64, error)); ok {
		return rf(page, perPage)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*entities.ArticleModels); ok {
		r0 = rf(page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ArticleModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int64); ok {
		r1 = rf(page, perPage)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, perPage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetArticleSearchByDateRange provides a mock function with given fields: filterType, searchText
func (_m *ServiceArticleInterface) GetArticleSearchByDateRange(filterType string, searchText string) ([]*entities.ArticleModels, error) {
	ret := _m.Called(filterType, searchText)

	var r0 []*entities.ArticleModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]*entities.ArticleModels, error)); ok {
		return rf(filterType, searchText)
	}
	if rf, ok := ret.Get(0).(func(string, string) []*entities.ArticleModels); ok {
		r0 = rf(filterType, searchText)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ArticleModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(filterType, searchText)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticlesAlphabet provides a mock function with given fields: page, perPage
func (_m *ServiceArticleInterface) GetArticlesAlphabet(page int, perPage int) ([]*entities.ArticleModels, int64, error) {
	ret := _m.Called(page, perPage)

	var r0 []*entities.ArticleModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*entities.ArticleModels, int64, error)); ok {
		return rf(page, perPage)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*entities.ArticleModels); ok {
		r0 = rf(page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ArticleModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int64); ok {
		r1 = rf(page, perPage)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, perPage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetArticlesByDateRange provides a mock function with given fields: filterType
func (_m *ServiceArticleInterface) GetArticlesByDateRange(filterType string) ([]*entities.ArticleModels, error) {
	ret := _m.Called(filterType)

	var r0 []*entities.ArticleModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*entities.ArticleModels, error)); ok {
		return rf(filterType)
	}
	if rf, ok := ret.Get(0).(func(string) []*entities.ArticleModels); ok {
		r0 = rf(filterType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ArticleModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filterType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticlesByTitle provides a mock function with given fields: title
func (_m *ServiceArticleInterface) GetArticlesByTitle(title string) ([]*entities.ArticleModels, error) {
	ret := _m.Called(title)

	var r0 []*entities.ArticleModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*entities.ArticleModels, error)); ok {
		return rf(title)
	}
	if rf, ok := ret.Get(0).(func(string) []*entities.ArticleModels); ok {
		r0 = rf(title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ArticleModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilterDateRange provides a mock function with given fields: filterType
func (_m *ServiceArticleInterface) GetFilterDateRange(filterType string) (time.Time, time.Time, error) {
	ret := _m.Called(filterType)

	var r0 time.Time
	var r1 time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (time.Time, time.Time, error)); ok {
		return rf(filterType)
	}
	if rf, ok := ret.Get(0).(func(string) time.Time); ok {
		r0 = rf(filterType)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(string) time.Time); ok {
		r1 = rf(filterType)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(filterType)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetLatestArticles provides a mock function with given fields:
func (_m *ServiceArticleInterface) GetLatestArticles() ([]*entities.ArticleModels, error) {
	ret := _m.Called()

	var r0 []*entities.ArticleModels
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.ArticleModels, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.ArticleModels); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ArticleModels)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNextPage provides a mock function with given fields: currentPage, totalPages
func (_m *ServiceArticleInterface) GetNextPage(currentPage int, totalPages int) int {
	ret := _m.Called(currentPage, totalPages)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(currentPage, totalPages)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetOldestArticle provides a mock function with given fields: page, perPage
func (_m *ServiceArticleInterface) GetOldestArticle(page int, perPage int) ([]*entities.ArticleModels, int64, error) {
	ret := _m.Called(page, perPage)

	var r0 []*entities.ArticleModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*entities.ArticleModels, int64, error)); ok {
		return rf(page, perPage)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*entities.ArticleModels); ok {
		r0 = rf(page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ArticleModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int64); ok {
		r1 = rf(page, perPage)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, perPage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOtherArticle provides a mock function with given fields:
func (_m *ServiceArticleInterface) GetOtherArticle() ([]*entities.ArticleModels, error) {
	ret := _m.Called()

	var r0 []*entities.ArticleModels
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.ArticleModels, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.ArticleModels); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ArticleModels)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrevPage provides a mock function with given fields: currentPage
func (_m *ServiceArticleInterface) GetPrevPage(currentPage int) int {
	ret := _m.Called(currentPage)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(currentPage)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetUserBookmarkArticle provides a mock function with given fields: userID
func (_m *ServiceArticleInterface) GetUserBookmarkArticle(userID uint64) ([]*entities.ArticleBookmarkModels, error) {
	ret := _m.Called(userID)

	var r0 []*entities.ArticleBookmarkModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) ([]*entities.ArticleBookmarkModels, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint64) []*entities.ArticleBookmarkModels); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ArticleBookmarkModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateArticleById provides a mock function with given fields: id, updatedArticle
func (_m *ServiceArticleInterface) UpdateArticleById(id uint64, updatedArticle *entities.ArticleModels) (*entities.ArticleModels, error) {
	ret := _m.Called(id, updatedArticle)

	var r0 *entities.ArticleModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, *entities.ArticleModels) (*entities.ArticleModels, error)); ok {
		return rf(id, updatedArticle)
	}
	if rf, ok := ret.Get(0).(func(uint64, *entities.ArticleModels) *entities.ArticleModels); ok {
		r0 = rf(id, updatedArticle)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ArticleModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, *entities.ArticleModels) error); ok {
		r1 = rf(id, updatedArticle)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServiceArticleInterface creates a new instance of ServiceArticleInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceArticleInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceArticleInterface {
	mock := &ServiceArticleInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
