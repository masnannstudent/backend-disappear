// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	entities "github.com/capstone-kelompok-7/backend-disappear/module/entities"
	mock "github.com/stretchr/testify/mock"
)

// RepositoryCartInterface is an autogenerated mock type for the RepositoryCartInterface type
type RepositoryCartInterface struct {
	mock.Mock
}

// CreateCart provides a mock function with given fields: newCart
func (_m *RepositoryCartInterface) CreateCart(newCart *entities.CartModels) (*entities.CartModels, error) {
	ret := _m.Called(newCart)

	var r0 *entities.CartModels
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.CartModels) (*entities.CartModels, error)); ok {
		return rf(newCart)
	}
	if rf, ok := ret.Get(0).(func(*entities.CartModels) *entities.CartModels); ok {
		r0 = rf(newCart)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.CartModels)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.CartModels) error); ok {
		r1 = rf(newCart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCartItem provides a mock function with given fields: cartItem
func (_m *RepositoryCartInterface) CreateCartItem(cartItem *entities.CartItemModels) (*entities.CartItemModels, error) {
	ret := _m.Called(cartItem)

	var r0 *entities.CartItemModels
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.CartItemModels) (*entities.CartItemModels, error)); ok {
		return rf(cartItem)
	}
	if rf, ok := ret.Get(0).(func(*entities.CartItemModels) *entities.CartItemModels); ok {
		r0 = rf(cartItem)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.CartItemModels)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.CartItemModels) error); ok {
		r1 = rf(cartItem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCartItem provides a mock function with given fields: cartItemID
func (_m *RepositoryCartInterface) DeleteCartItem(cartItemID uint64) error {
	ret := _m.Called(cartItemID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(cartItemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCart provides a mock function with given fields: userID
func (_m *RepositoryCartInterface) GetCart(userID uint64) (*entities.CartModels, error) {
	ret := _m.Called(userID)

	var r0 *entities.CartModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*entities.CartModels, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint64) *entities.CartModels); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.CartModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCartByID provides a mock function with given fields: cartID
func (_m *RepositoryCartInterface) GetCartByID(cartID uint64) (*entities.CartModels, error) {
	ret := _m.Called(cartID)

	var r0 *entities.CartModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*entities.CartModels, error)); ok {
		return rf(cartID)
	}
	if rf, ok := ret.Get(0).(func(uint64) *entities.CartModels); ok {
		r0 = rf(cartID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.CartModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(cartID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCartByUserID provides a mock function with given fields: userID
func (_m *RepositoryCartInterface) GetCartByUserID(userID uint64) (*entities.CartModels, error) {
	ret := _m.Called(userID)

	var r0 *entities.CartModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*entities.CartModels, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint64) *entities.CartModels); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.CartModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCartItemByID provides a mock function with given fields: cartItemID
func (_m *RepositoryCartInterface) GetCartItemByID(cartItemID uint64) (*entities.CartItemModels, error) {
	ret := _m.Called(cartItemID)

	var r0 *entities.CartItemModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*entities.CartItemModels, error)); ok {
		return rf(cartItemID)
	}
	if rf, ok := ret.Get(0).(func(uint64) *entities.CartItemModels); ok {
		r0 = rf(cartItemID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.CartItemModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(cartItemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCartItemByProductID provides a mock function with given fields: cartID, productID
func (_m *RepositoryCartInterface) GetCartItemByProductID(cartID uint64, productID uint64) (*entities.CartItemModels, error) {
	ret := _m.Called(cartID, productID)

	var r0 *entities.CartItemModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) (*entities.CartItemModels, error)); ok {
		return rf(cartID, productID)
	}
	if rf, ok := ret.Get(0).(func(uint64, uint64) *entities.CartItemModels); ok {
		r0 = rf(cartID, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.CartItemModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, uint64) error); ok {
		r1 = rf(cartID, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCartItemsByCartID provides a mock function with given fields: cartID
func (_m *RepositoryCartInterface) GetCartItemsByCartID(cartID uint64) ([]*entities.CartItemModels, error) {
	ret := _m.Called(cartID)

	var r0 []*entities.CartItemModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) ([]*entities.CartItemModels, error)); ok {
		return rf(cartID)
	}
	if rf, ok := ret.Get(0).(func(uint64) []*entities.CartItemModels); ok {
		r0 = rf(cartID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.CartItemModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(cartID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsProductInCart provides a mock function with given fields: userID, productID
func (_m *RepositoryCartInterface) IsProductInCart(userID uint64, productID uint64) bool {
	ret := _m.Called(userID, productID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint64, uint64) bool); ok {
		r0 = rf(userID, productID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RemoveProductFromCart provides a mock function with given fields: userID, productID
func (_m *RepositoryCartInterface) RemoveProductFromCart(userID uint64, productID uint64) error {
	ret := _m.Called(userID, productID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(userID, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCartItem provides a mock function with given fields: cartItem
func (_m *RepositoryCartInterface) UpdateCartItem(cartItem *entities.CartItemModels) error {
	ret := _m.Called(cartItem)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.CartItemModels) error); ok {
		r0 = rf(cartItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateGrandTotal provides a mock function with given fields: cartID, grandTotal
func (_m *RepositoryCartInterface) UpdateGrandTotal(cartID uint64, grandTotal uint64) error {
	ret := _m.Called(cartID, grandTotal)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(cartID, grandTotal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepositoryCartInterface creates a new instance of RepositoryCartInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryCartInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryCartInterface {
	mock := &RepositoryCartInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
