// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	entities "github.com/capstone-kelompok-7/backend-disappear/module/entities"
	mock "github.com/stretchr/testify/mock"
)

// ServiceCarouselInterface is an autogenerated mock type for the ServiceCarouselInterface type
type ServiceCarouselInterface struct {
	mock.Mock
}

// CalculatePaginationValues provides a mock function with given fields: page, totalItems, perPage
func (_m *ServiceCarouselInterface) CalculatePaginationValues(page int, totalItems int, perPage int) (int, int) {
	ret := _m.Called(page, totalItems, perPage)

	var r0 int
	var r1 int
	if rf, ok := ret.Get(0).(func(int, int, int) (int, int)); ok {
		return rf(page, totalItems, perPage)
	}
	if rf, ok := ret.Get(0).(func(int, int, int) int); ok {
		r0 = rf(page, totalItems, perPage)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int, int, int) int); ok {
		r1 = rf(page, totalItems, perPage)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// CreateCarousel provides a mock function with given fields: carouselData
func (_m *ServiceCarouselInterface) CreateCarousel(carouselData *entities.CarouselModels) (*entities.CarouselModels, error) {
	ret := _m.Called(carouselData)

	var r0 *entities.CarouselModels
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.CarouselModels) (*entities.CarouselModels, error)); ok {
		return rf(carouselData)
	}
	if rf, ok := ret.Get(0).(func(*entities.CarouselModels) *entities.CarouselModels); ok {
		r0 = rf(carouselData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.CarouselModels)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.CarouselModels) error); ok {
		r1 = rf(carouselData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCarousel provides a mock function with given fields: carouselID
func (_m *ServiceCarouselInterface) DeleteCarousel(carouselID uint64) error {
	ret := _m.Called(carouselID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(carouselID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: page, perPage
func (_m *ServiceCarouselInterface) GetAll(page int, perPage int) ([]*entities.CarouselModels, int64, error) {
	ret := _m.Called(page, perPage)

	var r0 []*entities.CarouselModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*entities.CarouselModels, int64, error)); ok {
		return rf(page, perPage)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*entities.CarouselModels); ok {
		r0 = rf(page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.CarouselModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int64); ok {
		r1 = rf(page, perPage)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, perPage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCarouselById provides a mock function with given fields: carouselID
func (_m *ServiceCarouselInterface) GetCarouselById(carouselID uint64) (*entities.CarouselModels, error) {
	ret := _m.Called(carouselID)

	var r0 *entities.CarouselModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*entities.CarouselModels, error)); ok {
		return rf(carouselID)
	}
	if rf, ok := ret.Get(0).(func(uint64) *entities.CarouselModels); ok {
		r0 = rf(carouselID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.CarouselModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(carouselID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCarouselsByName provides a mock function with given fields: page, perPage, name
func (_m *ServiceCarouselInterface) GetCarouselsByName(page int, perPage int, name string) ([]*entities.CarouselModels, int64, error) {
	ret := _m.Called(page, perPage, name)

	var r0 []*entities.CarouselModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]*entities.CarouselModels, int64, error)); ok {
		return rf(page, perPage, name)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []*entities.CarouselModels); ok {
		r0 = rf(page, perPage, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.CarouselModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) int64); ok {
		r1 = rf(page, perPage, name)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string) error); ok {
		r2 = rf(page, perPage, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetNextPage provides a mock function with given fields: currentPage, totalPages
func (_m *ServiceCarouselInterface) GetNextPage(currentPage int, totalPages int) int {
	ret := _m.Called(currentPage, totalPages)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(currentPage, totalPages)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetPrevPage provides a mock function with given fields: currentPage
func (_m *ServiceCarouselInterface) GetPrevPage(currentPage int) int {
	ret := _m.Called(currentPage)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(currentPage)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// UpdateCarousel provides a mock function with given fields: carouselID, updatedCarousel
func (_m *ServiceCarouselInterface) UpdateCarousel(carouselID uint64, updatedCarousel *entities.CarouselModels) error {
	ret := _m.Called(carouselID, updatedCarousel)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, *entities.CarouselModels) error); ok {
		r0 = rf(carouselID, updatedCarousel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewServiceCarouselInterface creates a new instance of ServiceCarouselInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceCarouselInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceCarouselInterface {
	mock := &ServiceCarouselInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
