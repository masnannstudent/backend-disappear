// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	entities "github.com/capstone-kelompok-7/backend-disappear/module/entities"
	mock "github.com/stretchr/testify/mock"
)

// RepositoryProductInterface is an autogenerated mock type for the RepositoryProductInterface type
type RepositoryProductInterface struct {
	mock.Mock
}

// CreateImageProduct provides a mock function with given fields: productImage
func (_m *RepositoryProductInterface) CreateImageProduct(productImage *entities.ProductPhotosModels) (*entities.ProductPhotosModels, error) {
	ret := _m.Called(productImage)

	var r0 *entities.ProductPhotosModels
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.ProductPhotosModels) (*entities.ProductPhotosModels, error)); ok {
		return rf(productImage)
	}
	if rf, ok := ret.Get(0).(func(*entities.ProductPhotosModels) *entities.ProductPhotosModels); ok {
		r0 = rf(productImage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ProductPhotosModels)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.ProductPhotosModels) error); ok {
		r1 = rf(productImage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProduct provides a mock function with given fields: productData, categoryIDs
func (_m *RepositoryProductInterface) CreateProduct(productData *entities.ProductModels, categoryIDs []uint64) (*entities.ProductModels, error) {
	ret := _m.Called(productData, categoryIDs)

	var r0 *entities.ProductModels
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.ProductModels, []uint64) (*entities.ProductModels, error)); ok {
		return rf(productData, categoryIDs)
	}
	if rf, ok := ret.Get(0).(func(*entities.ProductModels, []uint64) *entities.ProductModels); ok {
		r0 = rf(productData, categoryIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.ProductModels, []uint64) error); ok {
		r1 = rf(productData, categoryIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProduct provides a mock function with given fields: id
func (_m *RepositoryProductInterface) DeleteProduct(id uint64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProductImage provides a mock function with given fields: productID, imageID
func (_m *RepositoryProductInterface) DeleteProductImage(productID uint64, imageID uint64) error {
	ret := _m.Called(productID, imageID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(productID, imageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: page, perPage
func (_m *RepositoryProductInterface) FindAll(page int, perPage int) ([]*entities.ProductModels, error) {
	ret := _m.Called(page, perPage)

	var r0 []*entities.ProductModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*entities.ProductModels, error)); ok {
		return rf(page, perPage)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*entities.ProductModels); ok {
		r0 = rf(page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllProductByUserPreference provides a mock function with given fields: page, perPage, productsFromAI
func (_m *RepositoryProductInterface) FindAllProductByUserPreference(page int, perPage int, productsFromAI []string) ([]*entities.ProductModels, error) {
	ret := _m.Called(page, perPage, productsFromAI)

	var r0 []*entities.ProductModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, []string) ([]*entities.ProductModels, error)); ok {
		return rf(page, perPage, productsFromAI)
	}
	if rf, ok := ret.Get(0).(func(int, int, []string) []*entities.ProductModels); ok {
		r0 = rf(page, perPage, productsFromAI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, []string) error); ok {
		r1 = rf(page, perPage, productsFromAI)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: page, perPage, name
func (_m *RepositoryProductInterface) FindByName(page int, perPage int, name string) ([]*entities.ProductModels, error) {
	ret := _m.Called(page, perPage, name)

	var r0 []*entities.ProductModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]*entities.ProductModels, error)); ok {
		return rf(page, perPage, name)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []*entities.ProductModels); ok {
		r0 = rf(page, perPage, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) error); ok {
		r1 = rf(page, perPage, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByFilter provides a mock function with given fields: page, perPage, sortBy
func (_m *RepositoryProductInterface) GetProductByFilter(page int, perPage int, sortBy string) ([]*entities.ProductModels, int64, error) {
	ret := _m.Called(page, perPage, sortBy)

	var r0 []*entities.ProductModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]*entities.ProductModels, int64, error)); ok {
		return rf(page, perPage, sortBy)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []*entities.ProductModels); ok {
		r0 = rf(page, perPage, sortBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) int64); ok {
		r1 = rf(page, perPage, sortBy)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string) error); ok {
		r2 = rf(page, perPage, sortBy)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetProductByID provides a mock function with given fields: productID
func (_m *RepositoryProductInterface) GetProductByID(productID uint64) (*entities.ProductModels, error) {
	ret := _m.Called(productID)

	var r0 *entities.ProductModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*entities.ProductModels, error)); ok {
		return rf(productID)
	}
	if rf, ok := ret.Get(0).(func(uint64) *entities.ProductModels); ok {
		r0 = rf(productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductBySearchAndFilter provides a mock function with given fields: page, perPage, sortBy, search
func (_m *RepositoryProductInterface) GetProductBySearchAndFilter(page int, perPage int, sortBy string, search string) ([]*entities.ProductModels, int64, error) {
	ret := _m.Called(page, perPage, sortBy, search)

	var r0 []*entities.ProductModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string, string) ([]*entities.ProductModels, int64, error)); ok {
		return rf(page, perPage, sortBy, search)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, string) []*entities.ProductModels); ok {
		r0 = rf(page, perPage, sortBy, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, string) int64); ok {
		r1 = rf(page, perPage, sortBy, search)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string, string) error); ok {
		r2 = rf(page, perPage, sortBy, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetProductCountByCategoryName provides a mock function with given fields: categoryName
func (_m *RepositoryProductInterface) GetProductCountByCategoryName(categoryName string) (int64, error) {
	ret := _m.Called(categoryName)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(categoryName)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(categoryName)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(categoryName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductReviews provides a mock function with given fields: page, perPage
func (_m *RepositoryProductInterface) GetProductReviews(page int, perPage int) ([]*entities.ProductModels, error) {
	ret := _m.Called(page, perPage)

	var r0 []*entities.ProductModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*entities.ProductModels, error)); ok {
		return rf(page, perPage)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*entities.ProductModels); ok {
		r0 = rf(page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductsByCategoryAndName provides a mock function with given fields: page, perPage, categoryName, name
func (_m *RepositoryProductInterface) GetProductsByCategoryAndName(page int, perPage int, categoryName string, name string) ([]*entities.ProductModels, error) {
	ret := _m.Called(page, perPage, categoryName, name)

	var r0 []*entities.ProductModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, string, string) ([]*entities.ProductModels, error)); ok {
		return rf(page, perPage, categoryName, name)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, string) []*entities.ProductModels); ok {
		r0 = rf(page, perPage, categoryName, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, string) error); ok {
		r1 = rf(page, perPage, categoryName, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductsByCategoryName provides a mock function with given fields: categoryName, page, perPage
func (_m *RepositoryProductInterface) GetProductsByCategoryName(categoryName string, page int, perPage int) ([]*entities.ProductModels, error) {
	ret := _m.Called(categoryName, page, perPage)

	var r0 []*entities.ProductModels
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]*entities.ProductModels, error)); ok {
		return rf(categoryName, page, perPage)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []*entities.ProductModels); ok {
		r0 = rf(categoryName, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(categoryName, page, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductsCountByCategoryAndName provides a mock function with given fields: categoryName, name
func (_m *RepositoryProductInterface) GetProductsCountByCategoryAndName(categoryName string, name string) (int64, error) {
	ret := _m.Called(categoryName, name)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (int64, error)); ok {
		return rf(categoryName, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) int64); ok {
		r0 = rf(categoryName, name)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(categoryName, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRatedProductsInRange provides a mock function with given fields: page, perPage, lowerBound, upperBound
func (_m *RepositoryProductInterface) GetRatedProductsInRange(page int, perPage int, lowerBound float64, upperBound float64) ([]*entities.ProductModels, int64, error) {
	ret := _m.Called(page, perPage, lowerBound, upperBound)

	var r0 []*entities.ProductModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, float64, float64) ([]*entities.ProductModels, int64, error)); ok {
		return rf(page, perPage, lowerBound, upperBound)
	}
	if rf, ok := ret.Get(0).(func(int, int, float64, float64) []*entities.ProductModels); ok {
		r0 = rf(page, perPage, lowerBound, upperBound)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, float64, float64) int64); ok {
		r1 = rf(page, perPage, lowerBound, upperBound)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, float64, float64) error); ok {
		r2 = rf(page, perPage, lowerBound, upperBound)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTopRatedProducts provides a mock function with given fields:
func (_m *RepositoryProductInterface) GetTopRatedProducts() ([]*entities.ProductModels, error) {
	ret := _m.Called()

	var r0 []*entities.ProductModels
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.ProductModels, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.ProductModels); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalProductCount provides a mock function with given fields:
func (_m *RepositoryProductInterface) GetTotalProductCount() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalProductCountByName provides a mock function with given fields: name
func (_m *RepositoryProductInterface) GetTotalProductCountByName(name string) (int64, error) {
	ret := _m.Called(name)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalProductSold provides a mock function with given fields:
func (_m *RepositoryProductInterface) GetTotalProductSold() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncreaseStock provides a mock function with given fields: productID, quantity
func (_m *RepositoryProductInterface) IncreaseStock(productID uint64, quantity uint64) error {
	ret := _m.Called(productID, quantity)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(productID, quantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReduceStockWhenPurchasing provides a mock function with given fields: productID, stock
func (_m *RepositoryProductInterface) ReduceStockWhenPurchasing(productID uint64, stock uint64) error {
	ret := _m.Called(productID, stock)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(productID, stock)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchByNameAndFilterByRating provides a mock function with given fields: page, perPage, name, ratingParam, lowerBound, upperBound
func (_m *RepositoryProductInterface) SearchByNameAndFilterByRating(page int, perPage int, name string, ratingParam string, lowerBound float64, upperBound float64) ([]*entities.ProductModels, int64, error) {
	ret := _m.Called(page, perPage, name, ratingParam, lowerBound, upperBound)

	var r0 []*entities.ProductModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string, string, float64, float64) ([]*entities.ProductModels, int64, error)); ok {
		return rf(page, perPage, name, ratingParam, lowerBound, upperBound)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, string, float64, float64) []*entities.ProductModels); ok {
		r0 = rf(page, perPage, name, ratingParam, lowerBound, upperBound)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, string, float64, float64) int64); ok {
		r1 = rf(page, perPage, name, ratingParam, lowerBound, upperBound)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string, string, float64, float64) error); ok {
		r2 = rf(page, perPage, name, ratingParam, lowerBound, upperBound)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateProduct provides a mock function with given fields: _a0
func (_m *RepositoryProductInterface) UpdateProduct(_a0 *entities.ProductModels) (*entities.ProductModels, error) {
	ret := _m.Called(_a0)

	var r0 *entities.ProductModels
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.ProductModels) (*entities.ProductModels, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entities.ProductModels) *entities.ProductModels); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.ProductModels) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductCategories provides a mock function with given fields: _a0, categoryIDs
func (_m *RepositoryProductInterface) UpdateProductCategories(_a0 *entities.ProductModels, categoryIDs []uint64) error {
	ret := _m.Called(_a0, categoryIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.ProductModels, []uint64) error); ok {
		r0 = rf(_a0, categoryIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProductRating provides a mock function with given fields: productID, newRating
func (_m *RepositoryProductInterface) UpdateProductRating(productID uint64, newRating float64) error {
	ret := _m.Called(productID, newRating)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, float64) error); ok {
		r0 = rf(productID, newRating)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTotalReview provides a mock function with given fields: productID
func (_m *RepositoryProductInterface) UpdateTotalReview(productID uint64) error {
	ret := _m.Called(productID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepositoryProductInterface creates a new instance of RepositoryProductInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryProductInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryProductInterface {
	mock := &RepositoryProductInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
