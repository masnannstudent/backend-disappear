// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	entities "github.com/capstone-kelompok-7/backend-disappear/module/entities"
	dto "github.com/capstone-kelompok-7/backend-disappear/module/feature/product/dto"

	mock "github.com/stretchr/testify/mock"
)

// ServiceProductInterface is an autogenerated mock type for the ServiceProductInterface type
type ServiceProductInterface struct {
	mock.Mock
}

// CalculatePaginationValues provides a mock function with given fields: page, totalItems, perPage
func (_m *ServiceProductInterface) CalculatePaginationValues(page int, totalItems int, perPage int) (int, int) {
	ret := _m.Called(page, totalItems, perPage)

	var r0 int
	var r1 int
	if rf, ok := ret.Get(0).(func(int, int, int) (int, int)); ok {
		return rf(page, totalItems, perPage)
	}
	if rf, ok := ret.Get(0).(func(int, int, int) int); ok {
		r0 = rf(page, totalItems, perPage)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int, int, int) int); ok {
		r1 = rf(page, totalItems, perPage)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// CreateImageProduct provides a mock function with given fields: request
func (_m *ServiceProductInterface) CreateImageProduct(request dto.CreateProductImage) (*entities.ProductPhotosModels, error) {
	ret := _m.Called(request)

	var r0 *entities.ProductPhotosModels
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.CreateProductImage) (*entities.ProductPhotosModels, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(dto.CreateProductImage) *entities.ProductPhotosModels); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ProductPhotosModels)
		}
	}

	if rf, ok := ret.Get(1).(func(dto.CreateProductImage) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProduct provides a mock function with given fields: request
func (_m *ServiceProductInterface) CreateProduct(request *dto.CreateProductRequest) (*entities.ProductModels, error) {
	ret := _m.Called(request)

	var r0 *entities.ProductModels
	var r1 error
	if rf, ok := ret.Get(0).(func(*dto.CreateProductRequest) (*entities.ProductModels, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*dto.CreateProductRequest) *entities.ProductModels); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func(*dto.CreateProductRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteImageProduct provides a mock function with given fields: productId, imageId
func (_m *ServiceProductInterface) DeleteImageProduct(productId uint64, imageId uint64) error {
	ret := _m.Called(productId, imageId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(productId, imageId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProduct provides a mock function with given fields: id
func (_m *ServiceProductInterface) DeleteProduct(id uint64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: page, perPage
func (_m *ServiceProductInterface) GetAll(page int, perPage int) ([]*entities.ProductModels, int64, error) {
	ret := _m.Called(page, perPage)

	var r0 []*entities.ProductModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*entities.ProductModels, int64, error)); ok {
		return rf(page, perPage)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*entities.ProductModels); ok {
		r0 = rf(page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int64); ok {
		r1 = rf(page, perPage)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, perPage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetNextPage provides a mock function with given fields: currentPage, totalPages
func (_m *ServiceProductInterface) GetNextPage(currentPage int, totalPages int) int {
	ret := _m.Called(currentPage, totalPages)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(currentPage, totalPages)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetPrevPage provides a mock function with given fields: currentPage
func (_m *ServiceProductInterface) GetPrevPage(currentPage int) int {
	ret := _m.Called(currentPage)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(currentPage)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetProductByID provides a mock function with given fields: productID
func (_m *ServiceProductInterface) GetProductByID(productID uint64) (*entities.ProductModels, error) {
	ret := _m.Called(productID)

	var r0 *entities.ProductModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*entities.ProductModels, error)); ok {
		return rf(productID)
	}
	if rf, ok := ret.Get(0).(func(uint64) *entities.ProductModels); ok {
		r0 = rf(productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductRecommendation provides a mock function with given fields: userID, page, perPage
func (_m *ServiceProductInterface) GetProductRecommendation(userID uint64, page int, perPage int) ([]*entities.ProductModels, int64, error) {
	ret := _m.Called(userID, page, perPage)

	var r0 []*entities.ProductModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(uint64, int, int) ([]*entities.ProductModels, int64, error)); ok {
		return rf(userID, page, perPage)
	}
	if rf, ok := ret.Get(0).(func(uint64, int, int) []*entities.ProductModels); ok {
		r0 = rf(userID, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, int, int) int64); ok {
		r1 = rf(userID, page, perPage)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(uint64, int, int) error); ok {
		r2 = rf(userID, page, perPage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetProductReviews provides a mock function with given fields: page, perPage
func (_m *ServiceProductInterface) GetProductReviews(page int, perPage int) ([]*entities.ProductModels, int64, error) {
	ret := _m.Called(page, perPage)

	var r0 []*entities.ProductModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*entities.ProductModels, int64, error)); ok {
		return rf(page, perPage)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*entities.ProductModels); ok {
		r0 = rf(page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int64); ok {
		r1 = rf(page, perPage)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, perPage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetProductsByCategoryAndName provides a mock function with given fields: categoryName, name, page, perPage
func (_m *ServiceProductInterface) GetProductsByCategoryAndName(categoryName string, name string, page int, perPage int) ([]*entities.ProductModels, int64, error) {
	ret := _m.Called(categoryName, name, page, perPage)

	var r0 []*entities.ProductModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, int, int) ([]*entities.ProductModels, int64, error)); ok {
		return rf(categoryName, name, page, perPage)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int) []*entities.ProductModels); ok {
		r0 = rf(categoryName, name, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int) int64); ok {
		r1 = rf(categoryName, name, page, perPage)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, string, int, int) error); ok {
		r2 = rf(categoryName, name, page, perPage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetProductsByCategoryName provides a mock function with given fields: categoryName, page, perPage
func (_m *ServiceProductInterface) GetProductsByCategoryName(categoryName string, page int, perPage int) ([]*entities.ProductModels, int64, error) {
	ret := _m.Called(categoryName, page, perPage)

	var r0 []*entities.ProductModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]*entities.ProductModels, int64, error)); ok {
		return rf(categoryName, page, perPage)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []*entities.ProductModels); ok {
		r0 = rf(categoryName, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) int64); ok {
		r1 = rf(categoryName, page, perPage)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, int, int) error); ok {
		r2 = rf(categoryName, page, perPage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetProductsByFilter provides a mock function with given fields: page, perPage, filter
func (_m *ServiceProductInterface) GetProductsByFilter(page int, perPage int, filter string) ([]*entities.ProductModels, int64, error) {
	ret := _m.Called(page, perPage, filter)

	var r0 []*entities.ProductModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]*entities.ProductModels, int64, error)); ok {
		return rf(page, perPage, filter)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []*entities.ProductModels); ok {
		r0 = rf(page, perPage, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) int64); ok {
		r1 = rf(page, perPage, filter)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string) error); ok {
		r2 = rf(page, perPage, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetProductsByName provides a mock function with given fields: page, perPage, name
func (_m *ServiceProductInterface) GetProductsByName(page int, perPage int, name string) ([]*entities.ProductModels, int64, error) {
	ret := _m.Called(page, perPage, name)

	var r0 []*entities.ProductModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]*entities.ProductModels, int64, error)); ok {
		return rf(page, perPage, name)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []*entities.ProductModels); ok {
		r0 = rf(page, perPage, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) int64); ok {
		r1 = rf(page, perPage, name)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string) error); ok {
		r2 = rf(page, perPage, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetProductsBySearchAndFilter provides a mock function with given fields: page, perPage, filter, search
func (_m *ServiceProductInterface) GetProductsBySearchAndFilter(page int, perPage int, filter string, search string) ([]*entities.ProductModels, int64, error) {
	ret := _m.Called(page, perPage, filter, search)

	var r0 []*entities.ProductModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string, string) ([]*entities.ProductModels, int64, error)); ok {
		return rf(page, perPage, filter, search)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, string) []*entities.ProductModels); ok {
		r0 = rf(page, perPage, filter, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, string) int64); ok {
		r1 = rf(page, perPage, filter, search)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string, string) error); ok {
		r2 = rf(page, perPage, filter, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetRatedProductsInRange provides a mock function with given fields: page, perPage, ratingParam
func (_m *ServiceProductInterface) GetRatedProductsInRange(page int, perPage int, ratingParam string) ([]*entities.ProductModels, int64, error) {
	ret := _m.Called(page, perPage, ratingParam)

	var r0 []*entities.ProductModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]*entities.ProductModels, int64, error)); ok {
		return rf(page, perPage, ratingParam)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []*entities.ProductModels); ok {
		r0 = rf(page, perPage, ratingParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) int64); ok {
		r1 = rf(page, perPage, ratingParam)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string) error); ok {
		r2 = rf(page, perPage, ratingParam)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTopRatedProducts provides a mock function with given fields:
func (_m *ServiceProductInterface) GetTopRatedProducts() ([]*entities.ProductModels, error) {
	ret := _m.Called()

	var r0 []*entities.ProductModels
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.ProductModels, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.ProductModels); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalProductSold provides a mock function with given fields:
func (_m *ServiceProductInterface) GetTotalProductSold() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncreaseStock provides a mock function with given fields: productID, quantity
func (_m *ServiceProductInterface) IncreaseStock(productID uint64, quantity uint64) error {
	ret := _m.Called(productID, quantity)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(productID, quantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReduceStockWhenPurchasing provides a mock function with given fields: productID, quantity
func (_m *ServiceProductInterface) ReduceStockWhenPurchasing(productID uint64, quantity uint64) error {
	ret := _m.Called(productID, quantity)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(productID, quantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchByNameAndFilterByRating provides a mock function with given fields: page, perPage, name, ratingParam
func (_m *ServiceProductInterface) SearchByNameAndFilterByRating(page int, perPage int, name string, ratingParam string) ([]*entities.ProductModels, int64, error) {
	ret := _m.Called(page, perPage, name, ratingParam)

	var r0 []*entities.ProductModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string, string) ([]*entities.ProductModels, int64, error)); ok {
		return rf(page, perPage, name, ratingParam)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, string) []*entities.ProductModels); ok {
		r0 = rf(page, perPage, name, ratingParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, string) int64); ok {
		r1 = rf(page, perPage, name, ratingParam)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string, string) error); ok {
		r2 = rf(page, perPage, name, ratingParam)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateProduct provides a mock function with given fields: productID, request
func (_m *ServiceProductInterface) UpdateProduct(productID uint64, request *dto.UpdateProduct) (*entities.ProductModels, error) {
	ret := _m.Called(productID, request)

	var r0 *entities.ProductModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, *dto.UpdateProduct) (*entities.ProductModels, error)); ok {
		return rf(productID, request)
	}
	if rf, ok := ret.Get(0).(func(uint64, *dto.UpdateProduct) *entities.ProductModels); ok {
		r0 = rf(productID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ProductModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, *dto.UpdateProduct) error); ok {
		r1 = rf(productID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductRating provides a mock function with given fields: productID, newRating
func (_m *ServiceProductInterface) UpdateProductRating(productID uint64, newRating float64) error {
	ret := _m.Called(productID, newRating)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, float64) error); ok {
		r0 = rf(productID, newRating)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTotalReview provides a mock function with given fields: productID
func (_m *ServiceProductInterface) UpdateTotalReview(productID uint64) error {
	ret := _m.Called(productID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewServiceProductInterface creates a new instance of ServiceProductInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceProductInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceProductInterface {
	mock := &ServiceProductInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
